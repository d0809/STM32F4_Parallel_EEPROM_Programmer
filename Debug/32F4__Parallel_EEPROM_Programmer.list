
32F4__Parallel_EEPROM_Programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002184  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cec  08006cec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006cec  08006cec  00016cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cf4  08006cf4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cf4  08006cf4  00016cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000074  08006d70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08006d70  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb68  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002045  00000000  00000000  0002ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  00031a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000250fd  00000000  00000000  000327a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a050  00000000  00000000  0005789d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcf80  00000000  00000000  000618ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e86d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000437c  00000000  00000000  0013e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b50 	.word	0x08004b50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08004b50 	.word	0x08004b50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fe51 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f8c1 	bl	8000720 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f9b1 	bl	8000904 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005a2:	f000 f957 	bl	8000854 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a6:	f000 f97f 	bl	80008a8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM14_Init();
 80005aa:	f000 f92f 	bl	800080c <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005ae:	f000 f921 	bl	80007f4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  int limit =sizeof(values)/sizeof(uint8_t);
 80005b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b6:	60fb      	str	r3, [r7, #12]
 // int limit =200;
  setvbuf(stdin, NULL, _IONBF, 0);//disable buffers on stdin and stdout
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <main+0x164>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6858      	ldr	r0, [r3, #4]
 80005be:	2300      	movs	r3, #0
 80005c0:	2202      	movs	r2, #2
 80005c2:	2100      	movs	r1, #0
 80005c4:	f003 fb42 	bl	8003c4c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80005c8:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <main+0x164>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6898      	ldr	r0, [r3, #8]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2202      	movs	r2, #2
 80005d2:	2100      	movs	r1, #0
 80005d4:	f003 fb3a 	bl	8003c4c <setvbuf>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);//enable receive interrupt
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <main+0x168>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	68da      	ldr	r2, [r3, #12]
 80005de:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <main+0x168>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f042 0220 	orr.w	r2, r2, #32
 80005e6:	60da      	str	r2, [r3, #12]
  //
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Init(&htim14);
 80005e8:	4844      	ldr	r0, [pc, #272]	; (80006fc <main+0x16c>)
 80005ea:	f001 ff49 	bl	8002480 <HAL_TIM_Base_Init>

  HAL_TIM_Base_Start(&htim14);
 80005ee:	4843      	ldr	r0, [pc, #268]	; (80006fc <main+0x16c>)
 80005f0:	f001 ff71 	bl	80024d6 <HAL_TIM_Base_Start>
   * TIM14 configured with a prescaler of 167 for 1uS delays
   */
  while (1)
  {
		uint8_t data;
		uint8_t but = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	77fb      	strb	r3, [r7, #31]
		int errors = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]

		printf("Press user button to program EEPROM\n");
 80005fc:	4840      	ldr	r0, [pc, #256]	; (8000700 <main+0x170>)
 80005fe:	f003 fb1d 	bl	8003c3c <puts>
		while (but == 0) {
 8000602:	e006      	b.n	8000612 <main+0x82>
			but = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8000604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000608:	483e      	ldr	r0, [pc, #248]	; (8000704 <main+0x174>)
 800060a:	f001 f989 	bl	8001920 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	77fb      	strb	r3, [r7, #31]
		while (but == 0) {
 8000612:	7ffb      	ldrb	r3, [r7, #31]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f5      	beq.n	8000604 <main+0x74>
		}
		but = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	77fb      	strb	r3, [r7, #31]

		printf("Programming EEPROM\n");
 800061c:	483a      	ldr	r0, [pc, #232]	; (8000708 <main+0x178>)
 800061e:	f003 fb0d 	bl	8003c3c <puts>

		uint32_t time = HAL_GetTick();
 8000622:	f000 fe71 	bl	8001308 <HAL_GetTick>
 8000626:	60b8      	str	r0, [r7, #8]
		for (uint16_t address = 0; address < limit; ++address) {
 8000628:	2300      	movs	r3, #0
 800062a:	82fb      	strh	r3, [r7, #22]
 800062c:	e00a      	b.n	8000644 <main+0xb4>
			write(address, values[address]);
 800062e:	8afb      	ldrh	r3, [r7, #22]
 8000630:	4a36      	ldr	r2, [pc, #216]	; (800070c <main+0x17c>)
 8000632:	5cd2      	ldrb	r2, [r2, r3]
 8000634:	8afb      	ldrh	r3, [r7, #22]
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa89 	bl	8000b50 <write>
		for (uint16_t address = 0; address < limit; ++address) {
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	3301      	adds	r3, #1
 8000642:	82fb      	strh	r3, [r7, #22]
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	dcf0      	bgt.n	800062e <main+0x9e>
			//printf("Wrote address %u. \n\r", address);
		}

		time = (HAL_GetTick() - time) / 1000;
 800064c:	f000 fe5c 	bl	8001308 <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	4a2e      	ldr	r2, [pc, #184]	; (8000710 <main+0x180>)
 8000658:	fba2 2303 	umull	r2, r3, r2, r3
 800065c:	099b      	lsrs	r3, r3, #6
 800065e:	60bb      	str	r3, [r7, #8]
		printf("EEPROM programmed, operation took %u seconds. Verify?\n\r",(unsigned int) time);
 8000660:	68b9      	ldr	r1, [r7, #8]
 8000662:	482c      	ldr	r0, [pc, #176]	; (8000714 <main+0x184>)
 8000664:	f003 fa76 	bl	8003b54 <iprintf>

		while (but == 0) {
 8000668:	e006      	b.n	8000678 <main+0xe8>
			but = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 800066a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066e:	4825      	ldr	r0, [pc, #148]	; (8000704 <main+0x174>)
 8000670:	f001 f956 	bl	8001920 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	77fb      	strb	r3, [r7, #31]
		while (but == 0) {
 8000678:	7ffb      	ldrb	r3, [r7, #31]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f5      	beq.n	800066a <main+0xda>
		}
		but = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	77fb      	strb	r3, [r7, #31]

		for (int address = 0; address < limit; ++address) {
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	e01d      	b.n	80006c4 <main+0x134>
			data = read(address);
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	b29b      	uxth	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fb11 	bl	8000cb4 <read>
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
			if (data != values[address]) {
 8000696:	4a1d      	ldr	r2, [pc, #116]	; (800070c <main+0x17c>)
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	4413      	add	r3, r2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d00c      	beq.n	80006be <main+0x12e>
				++errors;
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
				printf("Found error at %X. Expected %X, got %X\n\r", address,
						values[address], data);
 80006aa:	4a18      	ldr	r2, [pc, #96]	; (800070c <main+0x17c>)
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
				printf("Found error at %X. Expected %X, got %X\n\r", address,
 80006b2:	461a      	mov	r2, r3
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	6939      	ldr	r1, [r7, #16]
 80006b8:	4817      	ldr	r0, [pc, #92]	; (8000718 <main+0x188>)
 80006ba:	f003 fa4b 	bl	8003b54 <iprintf>
		for (int address = 0; address < limit; ++address) {
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	3301      	adds	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dbdd      	blt.n	8000688 <main+0xf8>
			}
		}
		printf("Found %i errors, written %i bytes. Waiting for button.", errors,
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	69b9      	ldr	r1, [r7, #24]
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <main+0x18c>)
 80006d2:	f003 fa3f 	bl	8003b54 <iprintf>
				limit);
		while (but == 0) {
 80006d6:	e006      	b.n	80006e6 <main+0x156>
			but = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <main+0x174>)
 80006de:	f001 f91f 	bl	8001920 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	77fb      	strb	r3, [r7, #31]
		while (but == 0) {
 80006e6:	7ffb      	ldrb	r3, [r7, #31]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f5      	beq.n	80006d8 <main+0x148>
		}
		but = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	77fb      	strb	r3, [r7, #31]
  {
 80006f0:	e780      	b.n	80005f4 <main+0x64>
 80006f2:	bf00      	nop
 80006f4:	20000010 	.word	0x20000010
 80006f8:	200000a4 	.word	0x200000a4
 80006fc:	200004ec 	.word	0x200004ec
 8000700:	08004b68 	.word	0x08004b68
 8000704:	40020800 	.word	0x40020800
 8000708:	08004b8c 	.word	0x08004b8c
 800070c:	08004c3c 	.word	0x08004c3c
 8000710:	10624dd3 	.word	0x10624dd3
 8000714:	08004ba0 	.word	0x08004ba0
 8000718:	08004bd8 	.word	0x08004bd8
 800071c:	08004c04 	.word	0x08004c04

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fa08 	bl	8003b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	; (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000780:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000794:	23a8      	movs	r3, #168	; 0xa8
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fa09 	bl	8001bbc <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 fb28 	bl	8000e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2105      	movs	r1, #5
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fc62 	bl	800209c <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 fb11 	bl	8000e04 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	; 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2027      	movs	r0, #39	; 0x27
 80007fe:	f000 fe8c 	bl	800151a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000802:	2027      	movs	r0, #39	; 0x27
 8000804:	f000 fea5 	bl	8001552 <HAL_NVIC_EnableIRQ>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_TIM14_Init+0x40>)
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <MX_TIM14_Init+0x44>)
 8000814:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_TIM14_Init+0x40>)
 8000818:	2253      	movs	r2, #83	; 0x53
 800081a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_TIM14_Init+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_TIM14_Init+0x40>)
 8000824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000828:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_TIM14_Init+0x40>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_TIM14_Init+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_TIM14_Init+0x40>)
 8000838:	f001 fe22 	bl	8002480 <HAL_TIM_Base_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000842:	f000 fadf 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200004ec 	.word	0x200004ec
 8000850:	40002000 	.word	0x40002000

08000854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_USART3_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART3_UART_Init+0x4c>)
 800088c:	f001 fee8 	bl	8002660 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 fab5 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2202      	movs	r2, #2
 80008be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	f001 f849 	bl	8001982 <HAL_PCD_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 fa85 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000e4 	.word	0x200000e4

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b85      	ldr	r3, [pc, #532]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a84      	ldr	r2, [pc, #528]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b82      	ldr	r3, [pc, #520]	; (8000b34 <MX_GPIO_Init+0x230>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	4b7e      	ldr	r3, [pc, #504]	; (8000b34 <MX_GPIO_Init+0x230>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a7d      	ldr	r2, [pc, #500]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b7b      	ldr	r3, [pc, #492]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b77      	ldr	r3, [pc, #476]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a76      	ldr	r2, [pc, #472]	; (8000b34 <MX_GPIO_Init+0x230>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b74      	ldr	r3, [pc, #464]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b70      	ldr	r3, [pc, #448]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a6f      	ldr	r2, [pc, #444]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b6d      	ldr	r3, [pc, #436]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b69      	ldr	r3, [pc, #420]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a68      	ldr	r2, [pc, #416]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b66      	ldr	r3, [pc, #408]	; (8000b34 <MX_GPIO_Init+0x230>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <MX_GPIO_Init+0x230>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a61      	ldr	r2, [pc, #388]	; (8000b34 <MX_GPIO_Init+0x230>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b5f      	ldr	r3, [pc, #380]	; (8000b34 <MX_GPIO_Init+0x230>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b5b      	ldr	r3, [pc, #364]	; (8000b34 <MX_GPIO_Init+0x230>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a5a      	ldr	r2, [pc, #360]	; (8000b34 <MX_GPIO_Init+0x230>)
 80009cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b58      	ldr	r3, [pc, #352]	; (8000b34 <MX_GPIO_Init+0x230>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, A8_Pin|A9_Pin|A10_Pin|A11_Pin
 80009de:	2200      	movs	r2, #0
 80009e0:	217c      	movs	r1, #124	; 0x7c
 80009e2:	4855      	ldr	r0, [pc, #340]	; (8000b38 <MX_GPIO_Init+0x234>)
 80009e4:	f000 ffb4 	bl	8001950 <HAL_GPIO_WritePin>
                          |A12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A2_Pin|A3_Pin|A4_Pin|A5_Pin
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80009ee:	4853      	ldr	r0, [pc, #332]	; (8000b3c <MX_GPIO_Init+0x238>)
 80009f0:	f000 ffae 	bl	8001950 <HAL_GPIO_WritePin>
                          |A6_Pin|A7_Pin|A0_Pin|A1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	4851      	ldr	r0, [pc, #324]	; (8000b40 <MX_GPIO_Init+0x23c>)
 80009fa:	f000 ffa9 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WE_Pin|OE_Pin|CE_Pin, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000a04:	484f      	ldr	r0, [pc, #316]	; (8000b44 <MX_GPIO_Init+0x240>)
 8000a06:	f000 ffa3 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A8_Pin A9_Pin A10_Pin A11_Pin
                           A12_Pin */
  GPIO_InitStruct.Pin = A8_Pin|A9_Pin|A10_Pin|A11_Pin
 8000a0a:	237c      	movs	r3, #124	; 0x7c
 8000a0c:	61fb      	str	r3, [r7, #28]
                          |A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4845      	ldr	r0, [pc, #276]	; (8000b38 <MX_GPIO_Init+0x234>)
 8000a22:	f000 fdd3 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <MX_GPIO_Init+0x244>)
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4842      	ldr	r0, [pc, #264]	; (8000b44 <MX_GPIO_Init+0x240>)
 8000a3c:	f000 fdc6 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a40:	2332      	movs	r3, #50	; 0x32
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a50:	230b      	movs	r3, #11
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	483a      	ldr	r0, [pc, #232]	; (8000b44 <MX_GPIO_Init+0x240>)
 8000a5c:	f000 fdb6 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a60:	2386      	movs	r3, #134	; 0x86
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a70:	230b      	movs	r3, #11
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4834      	ldr	r0, [pc, #208]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000a7c:	f000 fda6 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_Pin IO1_Pin IO2_Pin IO3_Pin
                           IO4_Pin IO5_Pin IO6_Pin PB7 */
  GPIO_InitStruct.Pin = IO0_Pin|IO1_Pin|IO2_Pin|IO3_Pin
 8000a80:	23ff      	movs	r3, #255	; 0xff
 8000a82:	61fb      	str	r3, [r7, #28]
                          |IO4_Pin|IO5_Pin|IO6_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	482a      	ldr	r0, [pc, #168]	; (8000b3c <MX_GPIO_Init+0x238>)
 8000a94:	f000 fd9a 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_Pin A3_Pin A4_Pin A5_Pin
                           A6_Pin A7_Pin A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A2_Pin|A3_Pin|A4_Pin|A5_Pin
 8000a98:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a9c:	61fb      	str	r3, [r7, #28]
                          |A6_Pin|A7_Pin|A0_Pin|A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4822      	ldr	r0, [pc, #136]	; (8000b3c <MX_GPIO_Init+0x238>)
 8000ab2:	f000 fd8b 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab6:	2340      	movs	r3, #64	; 0x40
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <MX_GPIO_Init+0x23c>)
 8000ace:	f000 fd7d 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4816      	ldr	r0, [pc, #88]	; (8000b40 <MX_GPIO_Init+0x23c>)
 8000ae6:	f000 fd71 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : WE_Pin OE_Pin CE_Pin */
  GPIO_InitStruct.Pin = WE_Pin|OE_Pin|CE_Pin;
 8000aea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <MX_GPIO_Init+0x240>)
 8000b04:	f000 fd62 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_GPIO_Init+0x23c>)
 8000b26:	f000 fd51 	bl	80015cc <HAL_GPIO_Init>

}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	; 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40020800 	.word	0x40020800
 8000b48:	10110000 	.word	0x10110000
 8000b4c:	40020000 	.word	0x40020000

08000b50 <write>:

/* USER CODE BEGIN 4 */
void write(uint16_t address, uint8_t data){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	460a      	mov	r2, r1
 8000b5a:	80fb      	strh	r3, [r7, #6]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	717b      	strb	r3, [r7, #5]
	GPIOB->MODER = (GPIOB->MODER & ~0xFFFF) | 0b0101010101010101; //make PB0-7 outputs
 8000b60:	4b4f      	ldr	r3, [pc, #316]	; (8000ca0 <write+0x150>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	0c1b      	lsrs	r3, r3, #16
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <write+0x150>)
 8000b6a:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000b6e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000b72:	6013      	str	r3, [r2, #0]

	GPIOB->ODR = (GPIOB->ODR & ~(0xFFFF)) | ((address & 0xFF) << 8); //first 8 address bits to PB8-15, data to pb-7
 8000b74:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <write+0x150>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	0c1b      	lsrs	r3, r3, #16
 8000b7a:	041b      	lsls	r3, r3, #16
 8000b7c:	88fa      	ldrh	r2, [r7, #6]
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	b292      	uxth	r2, r2
 8000b82:	4947      	ldr	r1, [pc, #284]	; (8000ca0 <write+0x150>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	614b      	str	r3, [r1, #20]
	GPIOE->ODR = (GPIOE->ODR & ~(0b11111 << 2)) | ((address & 0x1F00) >> 6); //upper 5 address bytes to pe2-6
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <write+0x154>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	f023 027c 	bic.w	r2, r3, #124	; 0x7c
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	119b      	asrs	r3, r3, #6
 8000b94:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8000b98:	4942      	ldr	r1, [pc, #264]	; (8000ca4 <write+0x154>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	614b      	str	r3, [r1, #20]
	HAL_GPIO_WritePin(GPIOC, CE_Pin, GPIO_PIN_RESET); //enable CE after address and data are set
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba4:	4840      	ldr	r0, [pc, #256]	; (8000ca8 <write+0x158>)
 8000ba6:	f000 fed3 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, OE_Pin, GPIO_PIN_SET); //disable WE before wiritng addresses+data
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	483d      	ldr	r0, [pc, #244]	; (8000ca8 <write+0x158>)
 8000bb2:	f000 fecd 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, WE_Pin, GPIO_PIN_SET); //disable OE before writing data
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bbc:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <write+0x158>)
 8000bbe:	f000 fec7 	bl	8001950 <HAL_GPIO_WritePin>

	GPIOB->ODR |= data;
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <write+0x150>)
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	797b      	ldrb	r3, [r7, #5]
 8000bc8:	4935      	ldr	r1, [pc, #212]	; (8000ca0 <write+0x150>)
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	614b      	str	r3, [r1, #20]

	for (volatile int i = 0; i != delayconst; i++); //"1us" delay
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e002      	b.n	8000bda <write+0x8a>
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	4b33      	ldr	r3, [pc, #204]	; (8000cac <write+0x15c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d1f7      	bne.n	8000bd4 <write+0x84>
	HAL_GPIO_WritePin(GPIOC, WE_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bea:	482f      	ldr	r0, [pc, #188]	; (8000ca8 <write+0x158>)
 8000bec:	f000 feb0 	bl	8001950 <HAL_GPIO_WritePin>

	for (volatile int i = 0; i != delayconst; i++); //"1us" delay
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	e002      	b.n	8000bfc <write+0xac>
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <write+0x15c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d1f7      	bne.n	8000bf6 <write+0xa6>

	HAL_GPIO_WritePin(GPIOC, WE_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <write+0x158>)
 8000c0e:	f000 fe9f 	bl	8001950 <HAL_GPIO_WritePin>

	for (volatile int i = 0; i != delayconst; i++); //"1us" delay
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e002      	b.n	8000c1e <write+0xce>
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <write+0x15c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d1f7      	bne.n	8000c18 <write+0xc8>

	GPIOB->MODER &= ~0xFFFF;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <write+0x150>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <write+0x150>)
 8000c2e:	0c1b      	lsrs	r3, r3, #16
 8000c30:	041b      	lsls	r3, r3, #16
 8000c32:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, CE_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3a:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <write+0x158>)
 8000c3c:	f000 fe88 	bl	8001950 <HAL_GPIO_WritePin>
	while (!poll) {
 8000c40:	e022      	b.n	8000c88 <write+0x138>
		HAL_GPIO_WritePin(GPIOC, CE_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c48:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <write+0x158>)
 8000c4a:	f000 fe81 	bl	8001950 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, OE_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c54:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <write+0x158>)
 8000c56:	f000 fe7b 	bl	8001950 <HAL_GPIO_WritePin>
		if ((GPIOB->IDR & 0x80) == (data & 0x80)) {
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <write+0x150>)
 8000c5c:	691a      	ldr	r2, [r3, #16]
 8000c5e:	797b      	ldrb	r3, [r7, #5]
 8000c60:	4053      	eors	r3, r2
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <write+0x120>
			poll = 1;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <write+0x160>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(GPIOC, CE_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <write+0x158>)
 8000c78:	f000 fe6a 	bl	8001950 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, OE_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c82:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <write+0x158>)
 8000c84:	f000 fe64 	bl	8001950 <HAL_GPIO_WritePin>
	while (!poll) {
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <write+0x160>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0d8      	beq.n	8000c42 <write+0xf2>
	}
	poll = 0;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <write+0x160>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]

}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000095 	.word	0x20000095

08000cb4 <read>:
uint8_t read(uint16_t address){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80fb      	strh	r3, [r7, #6]
	uint8_t retval;
	GPIOB->MODER &= ~0xFFFF; //make PB0-7 inputs by setting first 16 bits of MODER to 0
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <read+0xd0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a30      	ldr	r2, [pc, #192]	; (8000d84 <read+0xd0>)
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	041b      	lsls	r3, r3, #16
 8000cc8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, OE_Pin, GPIO_PIN_RESET); //chip in standby but prepared for read mode
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd0:	482d      	ldr	r0, [pc, #180]	; (8000d88 <read+0xd4>)
 8000cd2:	f000 fe3d 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, WE_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cdc:	482a      	ldr	r0, [pc, #168]	; (8000d88 <read+0xd4>)
 8000cde:	f000 fe37 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CE_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4827      	ldr	r0, [pc, #156]	; (8000d88 <read+0xd4>)
 8000cea:	f000 fe31 	bl	8001950 <HAL_GPIO_WritePin>

	GPIOB->ODR = (GPIOB->ODR & ~(0xFF << 8)) | ((address & 0xFF) << 8); //first 8 address bits to PB8-15
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <read+0xd0>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4921      	ldr	r1, [pc, #132]	; (8000d84 <read+0xd0>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	614b      	str	r3, [r1, #20]
	GPIOE->ODR = (GPIOE->ODR & ~(0b11111 << 2))| ((address & 0x1F00) >> 6); //upper 5 address bytes to pe2-6
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <read+0xd8>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f023 027c 	bic.w	r2, r3, #124	; 0x7c
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	119b      	asrs	r3, r3, #6
 8000d0e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8000d12:	491e      	ldr	r1, [pc, #120]	; (8000d8c <read+0xd8>)
 8000d14:	4313      	orrs	r3, r2
 8000d16:	614b      	str	r3, [r1, #20]

	for (volatile int i = 0; i != delayconst; i++) //"1us" delay
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	e008      	b.n	8000d30 <read+0x7c>
	HAL_GPIO_WritePin(GPIOC, CE_Pin, GPIO_PIN_RESET); //activate chip and read data
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <read+0xd4>)
 8000d26:	f000 fe13 	bl	8001950 <HAL_GPIO_WritePin>
	for (volatile int i = 0; i != delayconst; i++) //"1us" delay
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <read+0xdc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d1f1      	bne.n	8000d1e <read+0x6a>
	for (volatile int i = 0; i != delayconst; i++); //"1us" delay
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e002      	b.n	8000d46 <read+0x92>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <read+0xdc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d1f7      	bne.n	8000d40 <read+0x8c>
	retval = (GPIOB->IDR & 0xFF);
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <read+0xd0>)
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOC, CE_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5c:	480a      	ldr	r0, [pc, #40]	; (8000d88 <read+0xd4>)
 8000d5e:	f000 fdf7 	bl	8001950 <HAL_GPIO_WritePin>
	for (volatile int i = 0; i != delayconst; i++); //"1us" delay
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	e002      	b.n	8000d6e <read+0xba>
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <read+0xdc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d1f7      	bne.n	8000d68 <read+0xb4>
	return retval;
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020400 	.word	0x40020400
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	20000000 	.word	0x20000000

08000d94 <__io_putchar>:
		__HAL_TIM_SET_COUNTER(&htim14,0);  // set the counter value a 0
		while (__HAL_TIM_GET_COUNTER(&htim14) < delay);  // wait for the counter to reach the us input in the parameter
}

PUTCHAR_PROTOTYPE
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000);
 8000d9c:	1d39      	adds	r1, r7, #4
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	2201      	movs	r2, #1
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <__io_putchar+0x20>)
 8000da6:	f001 fca8 	bl	80026fa <HAL_UART_Transmit>
  return ch;
 8000daa:	687b      	ldr	r3, [r7, #4]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000a4 	.word	0x200000a4

08000db8 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  int ch = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <__io_getchar+0x48>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__io_getchar+0x48>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]
  HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 1000);
 8000dd8:	1d39      	adds	r1, r7, #4
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	2201      	movs	r2, #1
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <__io_getchar+0x48>)
 8000de2:	f001 fd23 	bl	800282c <HAL_UART_Receive>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000);
 8000de6:	1d39      	adds	r1, r7, #4
 8000de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dec:	2201      	movs	r2, #1
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <__io_getchar+0x48>)
 8000df0:	f001 fc83 	bl	80026fa <HAL_UART_Transmit>
  return ch;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000a4 	.word	0x200000a4

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <Error_Handler+0x6>

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_TIM_Base_MspInit+0x40>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_TIM_Base_MspInit+0x40>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_TIM_Base_MspInit+0x40>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40002000 	.word	0x40002000
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <HAL_UART_MspInit+0x84>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12c      	bne.n	8000f1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000efa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000f18:	f000 fb58 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40004800 	.word	0x40004800
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020c00 	.word	0x40020c00

08000f30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f50:	d13f      	bne.n	8000fd2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_PCD_MspInit+0xac>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <HAL_PCD_MspInit+0xac>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_PCD_MspInit+0xac>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f80:	230a      	movs	r3, #10
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <HAL_PCD_MspInit+0xb0>)
 8000f8c:	f000 fb1e 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <HAL_PCD_MspInit+0xb0>)
 8000fa6:	f000 fb11 	bl	80015cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_PCD_MspInit+0xac>)
 8000fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_PCD_MspInit+0xac>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_PCD_MspInit+0xac>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_PCD_MspInit+0xac>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_PCD_MspInit+0xac>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f956 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(__HAL_UART_GET_IT_SOURCE(&huart3, UART_IT_RXNE)){//check if there is data in the receive register
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <USART3_IRQHandler+0x2c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <USART3_IRQHandler+0x20>
			buf= USART3->DR;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <USART3_IRQHandler+0x30>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <USART3_IRQHandler+0x34>)
 8001050:	6013      	str	r3, [r2, #0]
			flag = 1;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <USART3_IRQHandler+0x38>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <USART3_IRQHandler+0x2c>)
 800105a:	f001 fc8d 	bl	8002978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000a4 	.word	0x200000a4
 8001068:	40004800 	.word	0x40004800
 800106c:	20000090 	.word	0x20000090
 8001070:	20000094 	.word	0x20000094

08001074 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00a      	b.n	800109c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001086:	f7ff fe97 	bl	8000db8 <__io_getchar>
 800108a:	4601      	mov	r1, r0
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	b2ca      	uxtb	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf0      	blt.n	8001086 <_read+0x12>
	}

return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e009      	b.n	80010d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fe63 	bl	8000d94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf1      	blt.n	80010c0 <_write+0x12>
	}
	return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_close>:

int _close(int file)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
	return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110e:	605a      	str	r2, [r3, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_isatty>:

int _isatty(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return 1;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f002 fcb6 	bl	8003af0 <__errno>
 8001184:	4602      	mov	r2, r0
 8001186:	230c      	movs	r3, #12
 8001188:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20030000 	.word	0x20030000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	20000098 	.word	0x20000098
 80011b8:	20000538 	.word	0x20000538

080011bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <SystemInit+0x28>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <SystemInit+0x28>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SystemInit+0x28>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
#endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ee:	e003      	b.n	80011f8 <LoopCopyDataInit>

080011f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011f6:	3104      	adds	r1, #4

080011f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001200:	d3f6      	bcc.n	80011f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001204:	e002      	b.n	800120c <LoopFillZerobss>

08001206 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001206:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001208:	f842 3b04 	str.w	r3, [r2], #4

0800120c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800120e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001210:	d3f9      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001212:	f7ff ffd3 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f002 fc71 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff f9b9 	bl	8000590 <main>
  bx  lr    
 800121e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001220:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001224:	08006cfc 	.word	0x08006cfc
  ldr  r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800122c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001230:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001234:	20000534 	.word	0x20000534

08001238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_Init+0x40>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_Init+0x40>)
 8001252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_Init+0x40>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f94d 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fdcc 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f965 	bl	800156e <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f000 f92d 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000004 	.word	0x20000004
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000000c 	.word	0x2000000c
 8001304:	2000052c 	.word	0x2000052c

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000052c 	.word	0x2000052c

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_Delay+0x40>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000000c 	.word	0x2000000c

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff29 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff3e 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff8e 	bl	8001458 <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5d 	bl	8001404 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff31 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa2 	bl	80014c0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d004      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e00c      	b.n	80015be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2205      	movs	r2, #5
 80015a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e177      	b.n	80018d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 8166 	bne.w	80018d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d00b      	beq.n	8001626 <HAL_GPIO_Init+0x5a>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800161a:	2b11      	cmp	r3, #17
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b12      	cmp	r3, #18
 8001624:	d130      	bne.n	8001688 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 0201 	and.w	r2, r3, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0xfc>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b12      	cmp	r3, #18
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80c0 	beq.w	80018d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_GPIO_Init+0x320>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a64      	ldr	r2, [pc, #400]	; (80018ec <HAL_GPIO_Init+0x320>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b62      	ldr	r3, [pc, #392]	; (80018ec <HAL_GPIO_Init+0x320>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a60      	ldr	r2, [pc, #384]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a57      	ldr	r2, [pc, #348]	; (80018f4 <HAL_GPIO_Init+0x328>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d037      	beq.n	800180a <HAL_GPIO_Init+0x23e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x32c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d031      	beq.n	8001806 <HAL_GPIO_Init+0x23a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a55      	ldr	r2, [pc, #340]	; (80018fc <HAL_GPIO_Init+0x330>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d02b      	beq.n	8001802 <HAL_GPIO_Init+0x236>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a54      	ldr	r2, [pc, #336]	; (8001900 <HAL_GPIO_Init+0x334>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d025      	beq.n	80017fe <HAL_GPIO_Init+0x232>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a53      	ldr	r2, [pc, #332]	; (8001904 <HAL_GPIO_Init+0x338>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01f      	beq.n	80017fa <HAL_GPIO_Init+0x22e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_GPIO_Init+0x33c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d019      	beq.n	80017f6 <HAL_GPIO_Init+0x22a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a51      	ldr	r2, [pc, #324]	; (800190c <HAL_GPIO_Init+0x340>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x226>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_GPIO_Init+0x344>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x222>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4f      	ldr	r2, [pc, #316]	; (8001914 <HAL_GPIO_Init+0x348>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x21e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4e      	ldr	r2, [pc, #312]	; (8001918 <HAL_GPIO_Init+0x34c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x21a>
 80017e2:	2309      	movs	r3, #9
 80017e4:	e012      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017e6:	230a      	movs	r3, #10
 80017e8:	e010      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017ea:	2308      	movs	r3, #8
 80017ec:	e00e      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00c      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017f2:	2306      	movs	r3, #6
 80017f4:	e00a      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017f6:	2305      	movs	r3, #5
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x240>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x240>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x240>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x240>
 800180a:	2300      	movs	r3, #0
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	4934      	ldr	r1, [pc, #208]	; (80018f0 <HAL_GPIO_Init+0x324>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182a:	4b3c      	ldr	r3, [pc, #240]	; (800191c <HAL_GPIO_Init+0x350>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184e:	4a33      	ldr	r2, [pc, #204]	; (800191c <HAL_GPIO_Init+0x350>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_GPIO_Init+0x350>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_GPIO_Init+0x350>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187e:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_GPIO_Init+0x350>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a2:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_GPIO_Init+0x350>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <HAL_GPIO_Init+0x350>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <HAL_GPIO_Init+0x350>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	f67f ae84 	bls.w	80015e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	; 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40013800 	.word	0x40013800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40021000 	.word	0x40021000
 8001908:	40021400 	.word	0x40021400
 800190c:	40021800 	.word	0x40021800
 8001910:	40021c00 	.word	0x40021c00
 8001914:	40022000 	.word	0x40022000
 8001918:	40022400 	.word	0x40022400
 800191c:	40013c00 	.word	0x40013c00

08001920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001984:	b08f      	sub	sp, #60	; 0x3c
 8001986:	af0a      	add	r7, sp, #40	; 0x28
 8001988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e10f      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fabe 	bl	8000f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 fe37 	bl	8003646 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	687e      	ldr	r6, [r7, #4]
 80019e0:	466d      	mov	r5, sp
 80019e2:	f106 0410 	add.w	r4, r6, #16
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f6:	1d33      	adds	r3, r6, #4
 80019f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f001 fdc2 	bl	8003584 <USB_CoreInit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0d0      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 fe25 	bl	8003668 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e04a      	b.n	8001aba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	333d      	adds	r3, #61	; 0x3d
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	333c      	adds	r3, #60	; 0x3c
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	b298      	uxth	r0, r3
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3342      	adds	r3, #66	; 0x42
 8001a60:	4602      	mov	r2, r0
 8001a62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	333f      	adds	r3, #63	; 0x3f
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3344      	adds	r3, #68	; 0x44
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3348      	adds	r3, #72	; 0x48
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	3350      	adds	r3, #80	; 0x50
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3af      	bcc.n	8001a24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e044      	b.n	8001b54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	3301      	adds	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3b5      	bcc.n	8001aca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	687e      	ldr	r6, [r7, #4]
 8001b66:	466d      	mov	r5, sp
 8001b68:	f106 0410 	add.w	r4, r6, #16
 8001b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b7c:	1d33      	adds	r3, r6, #4
 8001b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f001 fd9b 	bl	80036bc <USB_DevInit>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e00d      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 ff4a 	bl	8003a46 <USB_DevDisconnect>

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e25b      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d075      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bda:	4ba3      	ldr	r3, [pc, #652]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d00c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be6:	4ba0      	ldr	r3, [pc, #640]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d112      	bne.n	8001c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf2:	4b9d      	ldr	r3, [pc, #628]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bfe:	d10b      	bne.n	8001c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	4b99      	ldr	r3, [pc, #612]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d05b      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x108>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d157      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e236      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d106      	bne.n	8001c30 <HAL_RCC_OscConfig+0x74>
 8001c22:	4b91      	ldr	r3, [pc, #580]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a90      	ldr	r2, [pc, #576]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e01d      	b.n	8001c6c <HAL_RCC_OscConfig+0xb0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x98>
 8001c3a:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a8a      	ldr	r2, [pc, #552]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a87      	ldr	r2, [pc, #540]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0xb0>
 8001c54:	4b84      	ldr	r3, [pc, #528]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a83      	ldr	r2, [pc, #524]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b81      	ldr	r3, [pc, #516]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a80      	ldr	r2, [pc, #512]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fb48 	bl	8001308 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fb44 	bl	8001308 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1fb      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0xc0>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fb34 	bl	8001308 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fb30 	bl	8001308 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1e7      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	4b6c      	ldr	r3, [pc, #432]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xe8>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d063      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cd2:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cde:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cea:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	4b5c      	ldr	r3, [pc, #368]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x152>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e1bb      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4952      	ldr	r1, [pc, #328]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	e03a      	b.n	8001d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <HAL_RCC_OscConfig+0x2b0>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff fae9 	bl	8001308 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fae5 	bl	8001308 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e19c      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4940      	ldr	r1, [pc, #256]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <HAL_RCC_OscConfig+0x2b0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff fac8 	bl	8001308 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fac4 	bl	8001308 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e17b      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d030      	beq.n	8001e08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCC_OscConfig+0x2b4>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff faa8 	bl	8001308 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff faa4 	bl	8001308 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e15b      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x200>
 8001dda:	e015      	b.n	8001e08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_OscConfig+0x2b4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa91 	bl	8001308 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dea:	f7ff fa8d 	bl	8001308 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e144      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a0 	beq.w	8001f56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10f      	bne.n	8001e46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_OscConfig+0x2b8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d121      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_RCC_OscConfig+0x2b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_RCC_OscConfig+0x2b8>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fa53 	bl	8001308 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	e011      	b.n	8001e8a <HAL_RCC_OscConfig+0x2ce>
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	42470000 	.word	0x42470000
 8001e70:	42470e80 	.word	0x42470e80
 8001e74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7ff fa46 	bl	8001308 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e0fd      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b81      	ldr	r3, [pc, #516]	; (8002090 <HAL_RCC_OscConfig+0x4d4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x2f0>
 8001e9e:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	4a7c      	ldr	r2, [pc, #496]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eaa:	e01c      	b.n	8001ee6 <HAL_RCC_OscConfig+0x32a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d10c      	bne.n	8001ece <HAL_RCC_OscConfig+0x312>
 8001eb4:	4b77      	ldr	r3, [pc, #476]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	4a76      	ldr	r2, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec0:	4b74      	ldr	r3, [pc, #464]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	4a73      	ldr	r2, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ecc:	e00b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x32a>
 8001ece:	4b71      	ldr	r3, [pc, #452]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a70      	ldr	r2, [pc, #448]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	4b6e      	ldr	r3, [pc, #440]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	4a6d      	ldr	r2, [pc, #436]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d015      	beq.n	8001f1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7ff fa0b 	bl	8001308 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff fa07 	bl	8001308 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0bc      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	4b61      	ldr	r3, [pc, #388]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ee      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x33a>
 8001f18:	e014      	b.n	8001f44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff f9f5 	bl	8001308 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff f9f1 	bl	8001308 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0a6      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	4b56      	ldr	r3, [pc, #344]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ee      	bne.n	8001f22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d105      	bne.n	8001f56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4a:	4b52      	ldr	r3, [pc, #328]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8092 	beq.w	8002084 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f60:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d05c      	beq.n	8002026 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d141      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f74:	4b48      	ldr	r3, [pc, #288]	; (8002098 <HAL_RCC_OscConfig+0x4dc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f9c5 	bl	8001308 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff f9c1 	bl	8001308 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e078      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	019b      	lsls	r3, r3, #6
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	061b      	lsls	r3, r3, #24
 8001fc4:	4933      	ldr	r1, [pc, #204]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fca:	4b33      	ldr	r3, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x4dc>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f99a 	bl	8001308 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff f996 	bl	8001308 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e04d      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
 8001ff6:	e045      	b.n	8002084 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x4dc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f983 	bl	8001308 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff f97f 	bl	8001308 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e036      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x44a>
 8002024:	e02e      	b.n	8002084 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e029      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	429a      	cmp	r2, r3
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d115      	bne.n	8002080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002060:	4293      	cmp	r3, r2
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d106      	bne.n	8002080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40007000 	.word	0x40007000
 8002094:	40023800 	.word	0x40023800
 8002098:	42470060 	.word	0x42470060

0800209c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0cc      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d90c      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b8      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a52      	ldr	r2, [pc, #328]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	494d      	ldr	r1, [pc, #308]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d044      	beq.n	80021bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d119      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d003      	beq.n	800215a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002156:	2b03      	cmp	r3, #3
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e067      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4934      	ldr	r1, [pc, #208]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7ff f8bc 	bl	8001308 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7ff f8b8 	bl	8001308 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e04f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20c      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e032      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4916      	ldr	r1, [pc, #88]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002222:	f000 f821 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002226:	4601      	mov	r1, r0
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	5cd3      	ldrb	r3, [r2, r3]
 8002236:	fa21 f303 	lsr.w	r3, r1, r3
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f81c 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00
 8002258:	40023800 	.word	0x40023800
 800225c:	08006c3c 	.word	0x08006c3c
 8002260:	20000004 	.word	0x20000004
 8002264:	20000008 	.word	0x20000008

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d007      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x32>
 800228a:	2b08      	cmp	r3, #8
 800228c:	d008      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x38>
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 80b4 	bne.w	80023fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4b5e      	ldr	r3, [pc, #376]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002296:	60bb      	str	r3, [r7, #8]
       break;
 8002298:	e0b3      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800229a:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800229c:	60bb      	str	r3, [r7, #8]
      break;
 800229e:	e0b0      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a0:	4b5a      	ldr	r3, [pc, #360]	; (800240c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022aa:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d04a      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b6:	4b55      	ldr	r3, [pc, #340]	; (800240c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	099b      	lsrs	r3, r3, #6
 80022bc:	f04f 0400 	mov.w	r4, #0
 80022c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	ea03 0501 	and.w	r5, r3, r1
 80022cc:	ea04 0602 	and.w	r6, r4, r2
 80022d0:	4629      	mov	r1, r5
 80022d2:	4632      	mov	r2, r6
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	f04f 0400 	mov.w	r4, #0
 80022dc:	0154      	lsls	r4, r2, #5
 80022de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022e2:	014b      	lsls	r3, r1, #5
 80022e4:	4619      	mov	r1, r3
 80022e6:	4622      	mov	r2, r4
 80022e8:	1b49      	subs	r1, r1, r5
 80022ea:	eb62 0206 	sbc.w	r2, r2, r6
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	f04f 0400 	mov.w	r4, #0
 80022f6:	0194      	lsls	r4, r2, #6
 80022f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022fc:	018b      	lsls	r3, r1, #6
 80022fe:	1a5b      	subs	r3, r3, r1
 8002300:	eb64 0402 	sbc.w	r4, r4, r2
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	00e2      	lsls	r2, r4, #3
 800230e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002312:	00d9      	lsls	r1, r3, #3
 8002314:	460b      	mov	r3, r1
 8002316:	4614      	mov	r4, r2
 8002318:	195b      	adds	r3, r3, r5
 800231a:	eb44 0406 	adc.w	r4, r4, r6
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	0262      	lsls	r2, r4, #9
 8002328:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800232c:	0259      	lsls	r1, r3, #9
 800232e:	460b      	mov	r3, r1
 8002330:	4614      	mov	r4, r2
 8002332:	4618      	mov	r0, r3
 8002334:	4621      	mov	r1, r4
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f04f 0400 	mov.w	r4, #0
 800233c:	461a      	mov	r2, r3
 800233e:	4623      	mov	r3, r4
 8002340:	f7fd ffa6 	bl	8000290 <__aeabi_uldivmod>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e049      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234c:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	f04f 0400 	mov.w	r4, #0
 8002356:	f240 11ff 	movw	r1, #511	; 0x1ff
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	ea03 0501 	and.w	r5, r3, r1
 8002362:	ea04 0602 	and.w	r6, r4, r2
 8002366:	4629      	mov	r1, r5
 8002368:	4632      	mov	r2, r6
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	0154      	lsls	r4, r2, #5
 8002374:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002378:	014b      	lsls	r3, r1, #5
 800237a:	4619      	mov	r1, r3
 800237c:	4622      	mov	r2, r4
 800237e:	1b49      	subs	r1, r1, r5
 8002380:	eb62 0206 	sbc.w	r2, r2, r6
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f04f 0400 	mov.w	r4, #0
 800238c:	0194      	lsls	r4, r2, #6
 800238e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002392:	018b      	lsls	r3, r1, #6
 8002394:	1a5b      	subs	r3, r3, r1
 8002396:	eb64 0402 	sbc.w	r4, r4, r2
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	00e2      	lsls	r2, r4, #3
 80023a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023a8:	00d9      	lsls	r1, r3, #3
 80023aa:	460b      	mov	r3, r1
 80023ac:	4614      	mov	r4, r2
 80023ae:	195b      	adds	r3, r3, r5
 80023b0:	eb44 0406 	adc.w	r4, r4, r6
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	02a2      	lsls	r2, r4, #10
 80023be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023c2:	0299      	lsls	r1, r3, #10
 80023c4:	460b      	mov	r3, r1
 80023c6:	4614      	mov	r4, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	4621      	mov	r1, r4
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f04f 0400 	mov.w	r4, #0
 80023d2:	461a      	mov	r2, r3
 80023d4:	4623      	mov	r3, r4
 80023d6:	f7fd ff5b 	bl	8000290 <__aeabi_uldivmod>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	60bb      	str	r3, [r7, #8]
      break;
 80023fa:	e002      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023fe:	60bb      	str	r3, [r7, #8]
      break;
 8002400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002402:	68bb      	ldr	r3, [r7, #8]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	00f42400 	.word	0x00f42400
 8002414:	007a1200 	.word	0x007a1200

08002418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_RCC_GetHCLKFreq+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002434:	f7ff fff0 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002438:	4601      	mov	r1, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	0a9b      	lsrs	r3, r3, #10
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4a03      	ldr	r2, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	08006c4c 	.word	0x08006c4c

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800245c:	f7ff ffdc 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002460:	4601      	mov	r1, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0b5b      	lsrs	r3, r3, #13
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4a03      	ldr	r2, [pc, #12]	; (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	08006c4c 	.word	0x08006c4c

08002480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e01d      	b.n	80024ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fcd8 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 f82e 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d007      	beq.n	8002508 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a40      	ldr	r2, [pc, #256]	; (8002634 <TIM_Base_SetConfig+0x114>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d00f      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <TIM_Base_SetConfig+0x118>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00b      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3c      	ldr	r2, [pc, #240]	; (800263c <TIM_Base_SetConfig+0x11c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <TIM_Base_SetConfig+0x120>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <TIM_Base_SetConfig+0x124>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d108      	bne.n	8002572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <TIM_Base_SetConfig+0x114>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d027      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <TIM_Base_SetConfig+0x118>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d023      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a2b      	ldr	r2, [pc, #172]	; (800263c <TIM_Base_SetConfig+0x11c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <TIM_Base_SetConfig+0x120>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <TIM_Base_SetConfig+0x124>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d017      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a28      	ldr	r2, [pc, #160]	; (8002648 <TIM_Base_SetConfig+0x128>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <TIM_Base_SetConfig+0x12c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00f      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <TIM_Base_SetConfig+0x130>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a25      	ldr	r2, [pc, #148]	; (8002654 <TIM_Base_SetConfig+0x134>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a24      	ldr	r2, [pc, #144]	; (8002658 <TIM_Base_SetConfig+0x138>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a23      	ldr	r2, [pc, #140]	; (800265c <TIM_Base_SetConfig+0x13c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d108      	bne.n	80025e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <TIM_Base_SetConfig+0x114>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d003      	beq.n	8002618 <TIM_Base_SetConfig+0xf8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <TIM_Base_SetConfig+0x124>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d103      	bne.n	8002620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	615a      	str	r2, [r3, #20]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800
 8002640:	40000c00 	.word	0x40000c00
 8002644:	40010400 	.word	0x40010400
 8002648:	40014000 	.word	0x40014000
 800264c:	40014400 	.word	0x40014400
 8002650:	40014800 	.word	0x40014800
 8002654:	40001800 	.word	0x40001800
 8002658:	40001c00 	.word	0x40001c00
 800265c:	40002000 	.word	0x40002000

08002660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e03f      	b.n	80026f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fc0a 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	; 0x24
 8002690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fbf1 	bl	8002e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b088      	sub	sp, #32
 80026fe:	af02      	add	r7, sp, #8
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 8083 	bne.w	8002822 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_UART_Transmit+0x2e>
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e07b      	b.n	8002824 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_UART_Transmit+0x40>
 8002736:	2302      	movs	r3, #2
 8002738:	e074      	b.n	8002824 <HAL_UART_Transmit+0x12a>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2221      	movs	r2, #33	; 0x21
 800274c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002750:	f7fe fdda 	bl	8001308 <HAL_GetTick>
 8002754:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	88fa      	ldrh	r2, [r7, #6]
 800275a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800276a:	e042      	b.n	80027f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002782:	d122      	bne.n	80027ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2200      	movs	r2, #0
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fa10 	bl	8002bb4 <UART_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e042      	b.n	8002824 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3302      	adds	r3, #2
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	e017      	b.n	80027f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	e013      	b.n	80027f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2180      	movs	r1, #128	; 0x80
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f9ed 	bl	8002bb4 <UART_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e01f      	b.n	8002824 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1b7      	bne.n	800276c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	2140      	movs	r1, #64	; 0x40
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f9d4 	bl	8002bb4 <UART_WaitOnFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e006      	b.n	8002824 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e000      	b.n	8002824 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002822:	2302      	movs	r3, #2
  }
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b20      	cmp	r3, #32
 800284a:	f040 8090 	bne.w	800296e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_UART_Receive+0x2e>
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e088      	b.n	8002970 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_UART_Receive+0x40>
 8002868:	2302      	movs	r3, #2
 800286a:	e081      	b.n	8002970 <HAL_UART_Receive+0x144>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2222      	movs	r2, #34	; 0x22
 800287e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002882:	f7fe fd41 	bl	8001308 <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800289c:	e05c      	b.n	8002958 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b4:	d12b      	bne.n	800290e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	2120      	movs	r1, #32
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f977 	bl	8002bb4 <UART_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e04f      	b.n	8002970 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3302      	adds	r3, #2
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	e030      	b.n	8002958 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	b29a      	uxth	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3301      	adds	r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	e024      	b.n	8002958 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2120      	movs	r1, #32
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f94b 	bl	8002bb4 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e023      	b.n	8002970 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	60ba      	str	r2, [r7, #8]
 800293c:	b2ca      	uxtb	r2, r1
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e00a      	b.n	8002958 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1c59      	adds	r1, r3, #1
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d19d      	bne.n	800289e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_UART_IRQHandler+0x52>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f9e0 	bl	8002d88 <UART_Receive_IT>
      return;
 80029c8:	e0d1      	b.n	8002b6e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80b0 	beq.w	8002b32 <HAL_UART_IRQHandler+0x1ba>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_UART_IRQHandler+0x70>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a5 	beq.w	8002b32 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_UART_IRQHandler+0x90>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_UART_IRQHandler+0xb0>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	f043 0202 	orr.w	r2, r3, #2
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_UART_IRQHandler+0xd0>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	f043 0204 	orr.w	r2, r3, #4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00f      	beq.n	8002a72 <HAL_UART_IRQHandler+0xfa>
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_UART_IRQHandler+0xee>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	f043 0208 	orr.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d078      	beq.n	8002b6c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_UART_IRQHandler+0x11c>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f97a 	bl	8002d88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <HAL_UART_IRQHandler+0x144>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d031      	beq.n	8002b20 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f8c3 	bl	8002c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b40      	cmp	r3, #64	; 0x40
 8002ace:	d123      	bne.n	8002b18 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ade:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <HAL_UART_IRQHandler+0x1fc>)
 8002aee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe fd46 	bl	8001586 <HAL_DMA_Abort_IT>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0e:	e00e      	b.n	8002b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f845 	bl	8002ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b16:	e00a      	b.n	8002b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f841 	bl	8002ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1e:	e006      	b.n	8002b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f83d 	bl	8002ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b2c:	e01e      	b.n	8002b6c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2e:	bf00      	nop
    return;
 8002b30:	e01c      	b.n	8002b6c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_UART_IRQHandler+0x1d6>
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8b0 	bl	8002cac <UART_Transmit_IT>
    return;
 8002b4c:	e00f      	b.n	8002b6e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_UART_IRQHandler+0x1f6>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8f8 	bl	8002d58 <UART_EndTransmit_IT>
    return;
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002b6c:	bf00      	nop
  }
}
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	08002c85 	.word	0x08002c85

08002b78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc4:	e02c      	b.n	8002c20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bcc:	d028      	beq.n	8002c20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bd4:	f7fe fb98 	bl	8001308 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d21d      	bcs.n	8002c20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bf2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e00f      	b.n	8002c40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d0c3      	beq.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff ff7e 	bl	8002ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b21      	cmp	r3, #33	; 0x21
 8002cbe:	d144      	bne.n	8002d4a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc8:	d11a      	bne.n	8002d00 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cde:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	1c9a      	adds	r2, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	621a      	str	r2, [r3, #32]
 8002cf2:	e00e      	b.n	8002d12 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	621a      	str	r2, [r3, #32]
 8002cfe:	e008      	b.n	8002d12 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	1c59      	adds	r1, r3, #1
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6211      	str	r1, [r2, #32]
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff fefd 	bl	8002b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b22      	cmp	r3, #34	; 0x22
 8002d9a:	d171      	bne.n	8002e80 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	d123      	bne.n	8002dee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10e      	bne.n	8002dd2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	1c9a      	adds	r2, r3, #2
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd0:	e029      	b.n	8002e26 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
 8002dec:	e01b      	b.n	8002e26 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6858      	ldr	r0, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	1c59      	adds	r1, r3, #1
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6291      	str	r1, [r2, #40]	; 0x28
 8002e06:	b2c2      	uxtb	r2, r0
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e00c      	b.n	8002e26 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	1c58      	adds	r0, r3, #1
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	6288      	str	r0, [r1, #40]	; 0x28
 8002e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4619      	mov	r1, r3
 8002e34:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d120      	bne.n	8002e7c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0220 	bic.w	r2, r2, #32
 8002e48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fe8a 	bl	8002b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e002      	b.n	8002e82 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ece:	f023 030c 	bic.w	r3, r3, #12
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	68f9      	ldr	r1, [r7, #12]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efa:	f040 818b 	bne.w	8003214 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4ac1      	ldr	r2, [pc, #772]	; (8003208 <UART_SetConfig+0x37c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d005      	beq.n	8002f14 <UART_SetConfig+0x88>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4abf      	ldr	r2, [pc, #764]	; (800320c <UART_SetConfig+0x380>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	f040 80bd 	bne.w	800308e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f14:	f7ff faa0 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002f18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	461d      	mov	r5, r3
 8002f1e:	f04f 0600 	mov.w	r6, #0
 8002f22:	46a8      	mov	r8, r5
 8002f24:	46b1      	mov	r9, r6
 8002f26:	eb18 0308 	adds.w	r3, r8, r8
 8002f2a:	eb49 0409 	adc.w	r4, r9, r9
 8002f2e:	4698      	mov	r8, r3
 8002f30:	46a1      	mov	r9, r4
 8002f32:	eb18 0805 	adds.w	r8, r8, r5
 8002f36:	eb49 0906 	adc.w	r9, r9, r6
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f4e:	4688      	mov	r8, r1
 8002f50:	4691      	mov	r9, r2
 8002f52:	eb18 0005 	adds.w	r0, r8, r5
 8002f56:	eb49 0106 	adc.w	r1, r9, r6
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	461d      	mov	r5, r3
 8002f60:	f04f 0600 	mov.w	r6, #0
 8002f64:	196b      	adds	r3, r5, r5
 8002f66:	eb46 0406 	adc.w	r4, r6, r6
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4623      	mov	r3, r4
 8002f6e:	f7fd f98f 	bl	8000290 <__aeabi_uldivmod>
 8002f72:	4603      	mov	r3, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	461a      	mov	r2, r3
 8002f78:	4ba5      	ldr	r3, [pc, #660]	; (8003210 <UART_SetConfig+0x384>)
 8002f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	461d      	mov	r5, r3
 8002f88:	f04f 0600 	mov.w	r6, #0
 8002f8c:	46a9      	mov	r9, r5
 8002f8e:	46b2      	mov	sl, r6
 8002f90:	eb19 0309 	adds.w	r3, r9, r9
 8002f94:	eb4a 040a 	adc.w	r4, sl, sl
 8002f98:	4699      	mov	r9, r3
 8002f9a:	46a2      	mov	sl, r4
 8002f9c:	eb19 0905 	adds.w	r9, r9, r5
 8002fa0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fb8:	4689      	mov	r9, r1
 8002fba:	4692      	mov	sl, r2
 8002fbc:	eb19 0005 	adds.w	r0, r9, r5
 8002fc0:	eb4a 0106 	adc.w	r1, sl, r6
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	461d      	mov	r5, r3
 8002fca:	f04f 0600 	mov.w	r6, #0
 8002fce:	196b      	adds	r3, r5, r5
 8002fd0:	eb46 0406 	adc.w	r4, r6, r6
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	f7fd f95a 	bl	8000290 <__aeabi_uldivmod>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b8b      	ldr	r3, [pc, #556]	; (8003210 <UART_SetConfig+0x384>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	; 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a86      	ldr	r2, [pc, #536]	; (8003210 <UART_SetConfig+0x384>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003004:	4498      	add	r8, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	461d      	mov	r5, r3
 800300a:	f04f 0600 	mov.w	r6, #0
 800300e:	46a9      	mov	r9, r5
 8003010:	46b2      	mov	sl, r6
 8003012:	eb19 0309 	adds.w	r3, r9, r9
 8003016:	eb4a 040a 	adc.w	r4, sl, sl
 800301a:	4699      	mov	r9, r3
 800301c:	46a2      	mov	sl, r4
 800301e:	eb19 0905 	adds.w	r9, r9, r5
 8003022:	eb4a 0a06 	adc.w	sl, sl, r6
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003032:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003036:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800303a:	4689      	mov	r9, r1
 800303c:	4692      	mov	sl, r2
 800303e:	eb19 0005 	adds.w	r0, r9, r5
 8003042:	eb4a 0106 	adc.w	r1, sl, r6
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	461d      	mov	r5, r3
 800304c:	f04f 0600 	mov.w	r6, #0
 8003050:	196b      	adds	r3, r5, r5
 8003052:	eb46 0406 	adc.w	r4, r6, r6
 8003056:	461a      	mov	r2, r3
 8003058:	4623      	mov	r3, r4
 800305a:	f7fd f919 	bl	8000290 <__aeabi_uldivmod>
 800305e:	4603      	mov	r3, r0
 8003060:	460c      	mov	r4, r1
 8003062:	461a      	mov	r2, r3
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <UART_SetConfig+0x384>)
 8003066:	fba3 1302 	umull	r1, r3, r3, r2
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	3332      	adds	r3, #50	; 0x32
 8003078:	4a65      	ldr	r2, [pc, #404]	; (8003210 <UART_SetConfig+0x384>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	f003 0207 	and.w	r2, r3, #7
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4442      	add	r2, r8
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	e26f      	b.n	800356e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800308e:	f7ff f9cf 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8003092:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	461d      	mov	r5, r3
 8003098:	f04f 0600 	mov.w	r6, #0
 800309c:	46a8      	mov	r8, r5
 800309e:	46b1      	mov	r9, r6
 80030a0:	eb18 0308 	adds.w	r3, r8, r8
 80030a4:	eb49 0409 	adc.w	r4, r9, r9
 80030a8:	4698      	mov	r8, r3
 80030aa:	46a1      	mov	r9, r4
 80030ac:	eb18 0805 	adds.w	r8, r8, r5
 80030b0:	eb49 0906 	adc.w	r9, r9, r6
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030c8:	4688      	mov	r8, r1
 80030ca:	4691      	mov	r9, r2
 80030cc:	eb18 0005 	adds.w	r0, r8, r5
 80030d0:	eb49 0106 	adc.w	r1, r9, r6
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	461d      	mov	r5, r3
 80030da:	f04f 0600 	mov.w	r6, #0
 80030de:	196b      	adds	r3, r5, r5
 80030e0:	eb46 0406 	adc.w	r4, r6, r6
 80030e4:	461a      	mov	r2, r3
 80030e6:	4623      	mov	r3, r4
 80030e8:	f7fd f8d2 	bl	8000290 <__aeabi_uldivmod>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <UART_SetConfig+0x384>)
 80030f4:	fba3 2302 	umull	r2, r3, r3, r2
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	461d      	mov	r5, r3
 8003102:	f04f 0600 	mov.w	r6, #0
 8003106:	46a9      	mov	r9, r5
 8003108:	46b2      	mov	sl, r6
 800310a:	eb19 0309 	adds.w	r3, r9, r9
 800310e:	eb4a 040a 	adc.w	r4, sl, sl
 8003112:	4699      	mov	r9, r3
 8003114:	46a2      	mov	sl, r4
 8003116:	eb19 0905 	adds.w	r9, r9, r5
 800311a:	eb4a 0a06 	adc.w	sl, sl, r6
 800311e:	f04f 0100 	mov.w	r1, #0
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800312a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800312e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003132:	4689      	mov	r9, r1
 8003134:	4692      	mov	sl, r2
 8003136:	eb19 0005 	adds.w	r0, r9, r5
 800313a:	eb4a 0106 	adc.w	r1, sl, r6
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461d      	mov	r5, r3
 8003144:	f04f 0600 	mov.w	r6, #0
 8003148:	196b      	adds	r3, r5, r5
 800314a:	eb46 0406 	adc.w	r4, r6, r6
 800314e:	461a      	mov	r2, r3
 8003150:	4623      	mov	r3, r4
 8003152:	f7fd f89d 	bl	8000290 <__aeabi_uldivmod>
 8003156:	4603      	mov	r3, r0
 8003158:	460c      	mov	r4, r1
 800315a:	461a      	mov	r2, r3
 800315c:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <UART_SetConfig+0x384>)
 800315e:	fba3 1302 	umull	r1, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2164      	movs	r1, #100	; 0x64
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	3332      	adds	r3, #50	; 0x32
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <UART_SetConfig+0x384>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800317e:	4498      	add	r8, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	461d      	mov	r5, r3
 8003184:	f04f 0600 	mov.w	r6, #0
 8003188:	46a9      	mov	r9, r5
 800318a:	46b2      	mov	sl, r6
 800318c:	eb19 0309 	adds.w	r3, r9, r9
 8003190:	eb4a 040a 	adc.w	r4, sl, sl
 8003194:	4699      	mov	r9, r3
 8003196:	46a2      	mov	sl, r4
 8003198:	eb19 0905 	adds.w	r9, r9, r5
 800319c:	eb4a 0a06 	adc.w	sl, sl, r6
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031b4:	4689      	mov	r9, r1
 80031b6:	4692      	mov	sl, r2
 80031b8:	eb19 0005 	adds.w	r0, r9, r5
 80031bc:	eb4a 0106 	adc.w	r1, sl, r6
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	461d      	mov	r5, r3
 80031c6:	f04f 0600 	mov.w	r6, #0
 80031ca:	196b      	adds	r3, r5, r5
 80031cc:	eb46 0406 	adc.w	r4, r6, r6
 80031d0:	461a      	mov	r2, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	f7fd f85c 	bl	8000290 <__aeabi_uldivmod>
 80031d8:	4603      	mov	r3, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	461a      	mov	r2, r3
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <UART_SetConfig+0x384>)
 80031e0:	fba3 1302 	umull	r1, r3, r3, r2
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	2164      	movs	r1, #100	; 0x64
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3332      	adds	r3, #50	; 0x32
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <UART_SetConfig+0x384>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	f003 0207 	and.w	r2, r3, #7
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4442      	add	r2, r8
 8003204:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003206:	e1b2      	b.n	800356e <UART_SetConfig+0x6e2>
 8003208:	40011000 	.word	0x40011000
 800320c:	40011400 	.word	0x40011400
 8003210:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4ad7      	ldr	r2, [pc, #860]	; (8003578 <UART_SetConfig+0x6ec>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d005      	beq.n	800322a <UART_SetConfig+0x39e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4ad6      	ldr	r2, [pc, #856]	; (800357c <UART_SetConfig+0x6f0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f040 80d1 	bne.w	80033cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800322a:	f7ff f915 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 800322e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	469a      	mov	sl, r3
 8003234:	f04f 0b00 	mov.w	fp, #0
 8003238:	46d0      	mov	r8, sl
 800323a:	46d9      	mov	r9, fp
 800323c:	eb18 0308 	adds.w	r3, r8, r8
 8003240:	eb49 0409 	adc.w	r4, r9, r9
 8003244:	4698      	mov	r8, r3
 8003246:	46a1      	mov	r9, r4
 8003248:	eb18 080a 	adds.w	r8, r8, sl
 800324c:	eb49 090b 	adc.w	r9, r9, fp
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800325c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003260:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003264:	4688      	mov	r8, r1
 8003266:	4691      	mov	r9, r2
 8003268:	eb1a 0508 	adds.w	r5, sl, r8
 800326c:	eb4b 0609 	adc.w	r6, fp, r9
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4619      	mov	r1, r3
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f04f 0400 	mov.w	r4, #0
 8003282:	0094      	lsls	r4, r2, #2
 8003284:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003288:	008b      	lsls	r3, r1, #2
 800328a:	461a      	mov	r2, r3
 800328c:	4623      	mov	r3, r4
 800328e:	4628      	mov	r0, r5
 8003290:	4631      	mov	r1, r6
 8003292:	f7fc fffd 	bl	8000290 <__aeabi_uldivmod>
 8003296:	4603      	mov	r3, r0
 8003298:	460c      	mov	r4, r1
 800329a:	461a      	mov	r2, r3
 800329c:	4bb8      	ldr	r3, [pc, #736]	; (8003580 <UART_SetConfig+0x6f4>)
 800329e:	fba3 2302 	umull	r2, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	469b      	mov	fp, r3
 80032ac:	f04f 0c00 	mov.w	ip, #0
 80032b0:	46d9      	mov	r9, fp
 80032b2:	46e2      	mov	sl, ip
 80032b4:	eb19 0309 	adds.w	r3, r9, r9
 80032b8:	eb4a 040a 	adc.w	r4, sl, sl
 80032bc:	4699      	mov	r9, r3
 80032be:	46a2      	mov	sl, r4
 80032c0:	eb19 090b 	adds.w	r9, r9, fp
 80032c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032dc:	4689      	mov	r9, r1
 80032de:	4692      	mov	sl, r2
 80032e0:	eb1b 0509 	adds.w	r5, fp, r9
 80032e4:	eb4c 060a 	adc.w	r6, ip, sl
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f04f 0400 	mov.w	r4, #0
 80032fa:	0094      	lsls	r4, r2, #2
 80032fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003300:	008b      	lsls	r3, r1, #2
 8003302:	461a      	mov	r2, r3
 8003304:	4623      	mov	r3, r4
 8003306:	4628      	mov	r0, r5
 8003308:	4631      	mov	r1, r6
 800330a:	f7fc ffc1 	bl	8000290 <__aeabi_uldivmod>
 800330e:	4603      	mov	r3, r0
 8003310:	460c      	mov	r4, r1
 8003312:	461a      	mov	r2, r3
 8003314:	4b9a      	ldr	r3, [pc, #616]	; (8003580 <UART_SetConfig+0x6f4>)
 8003316:	fba3 1302 	umull	r1, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2164      	movs	r1, #100	; 0x64
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	3332      	adds	r3, #50	; 0x32
 8003328:	4a95      	ldr	r2, [pc, #596]	; (8003580 <UART_SetConfig+0x6f4>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003334:	4498      	add	r8, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	469b      	mov	fp, r3
 800333a:	f04f 0c00 	mov.w	ip, #0
 800333e:	46d9      	mov	r9, fp
 8003340:	46e2      	mov	sl, ip
 8003342:	eb19 0309 	adds.w	r3, r9, r9
 8003346:	eb4a 040a 	adc.w	r4, sl, sl
 800334a:	4699      	mov	r9, r3
 800334c:	46a2      	mov	sl, r4
 800334e:	eb19 090b 	adds.w	r9, r9, fp
 8003352:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003356:	f04f 0100 	mov.w	r1, #0
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800336a:	4689      	mov	r9, r1
 800336c:	4692      	mov	sl, r2
 800336e:	eb1b 0509 	adds.w	r5, fp, r9
 8003372:	eb4c 060a 	adc.w	r6, ip, sl
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4619      	mov	r1, r3
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	f04f 0400 	mov.w	r4, #0
 8003388:	0094      	lsls	r4, r2, #2
 800338a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800338e:	008b      	lsls	r3, r1, #2
 8003390:	461a      	mov	r2, r3
 8003392:	4623      	mov	r3, r4
 8003394:	4628      	mov	r0, r5
 8003396:	4631      	mov	r1, r6
 8003398:	f7fc ff7a 	bl	8000290 <__aeabi_uldivmod>
 800339c:	4603      	mov	r3, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b77      	ldr	r3, [pc, #476]	; (8003580 <UART_SetConfig+0x6f4>)
 80033a4:	fba3 1302 	umull	r1, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a72      	ldr	r2, [pc, #456]	; (8003580 <UART_SetConfig+0x6f4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4442      	add	r2, r8
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	e0d0      	b.n	800356e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80033cc:	f7ff f830 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 80033d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	469a      	mov	sl, r3
 80033d6:	f04f 0b00 	mov.w	fp, #0
 80033da:	46d0      	mov	r8, sl
 80033dc:	46d9      	mov	r9, fp
 80033de:	eb18 0308 	adds.w	r3, r8, r8
 80033e2:	eb49 0409 	adc.w	r4, r9, r9
 80033e6:	4698      	mov	r8, r3
 80033e8:	46a1      	mov	r9, r4
 80033ea:	eb18 080a 	adds.w	r8, r8, sl
 80033ee:	eb49 090b 	adc.w	r9, r9, fp
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003402:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003406:	4688      	mov	r8, r1
 8003408:	4691      	mov	r9, r2
 800340a:	eb1a 0508 	adds.w	r5, sl, r8
 800340e:	eb4b 0609 	adc.w	r6, fp, r9
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4619      	mov	r1, r3
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	f04f 0400 	mov.w	r4, #0
 8003424:	0094      	lsls	r4, r2, #2
 8003426:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800342a:	008b      	lsls	r3, r1, #2
 800342c:	461a      	mov	r2, r3
 800342e:	4623      	mov	r3, r4
 8003430:	4628      	mov	r0, r5
 8003432:	4631      	mov	r1, r6
 8003434:	f7fc ff2c 	bl	8000290 <__aeabi_uldivmod>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	461a      	mov	r2, r3
 800343e:	4b50      	ldr	r3, [pc, #320]	; (8003580 <UART_SetConfig+0x6f4>)
 8003440:	fba3 2302 	umull	r2, r3, r3, r2
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	469b      	mov	fp, r3
 800344e:	f04f 0c00 	mov.w	ip, #0
 8003452:	46d9      	mov	r9, fp
 8003454:	46e2      	mov	sl, ip
 8003456:	eb19 0309 	adds.w	r3, r9, r9
 800345a:	eb4a 040a 	adc.w	r4, sl, sl
 800345e:	4699      	mov	r9, r3
 8003460:	46a2      	mov	sl, r4
 8003462:	eb19 090b 	adds.w	r9, r9, fp
 8003466:	eb4a 0a0c 	adc.w	sl, sl, ip
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003476:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800347a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800347e:	4689      	mov	r9, r1
 8003480:	4692      	mov	sl, r2
 8003482:	eb1b 0509 	adds.w	r5, fp, r9
 8003486:	eb4c 060a 	adc.w	r6, ip, sl
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4619      	mov	r1, r3
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	f04f 0400 	mov.w	r4, #0
 800349c:	0094      	lsls	r4, r2, #2
 800349e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034a2:	008b      	lsls	r3, r1, #2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	4628      	mov	r0, r5
 80034aa:	4631      	mov	r1, r6
 80034ac:	f7fc fef0 	bl	8000290 <__aeabi_uldivmod>
 80034b0:	4603      	mov	r3, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b32      	ldr	r3, [pc, #200]	; (8003580 <UART_SetConfig+0x6f4>)
 80034b8:	fba3 1302 	umull	r1, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	2164      	movs	r1, #100	; 0x64
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	3332      	adds	r3, #50	; 0x32
 80034ca:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <UART_SetConfig+0x6f4>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d6:	4498      	add	r8, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	469b      	mov	fp, r3
 80034dc:	f04f 0c00 	mov.w	ip, #0
 80034e0:	46d9      	mov	r9, fp
 80034e2:	46e2      	mov	sl, ip
 80034e4:	eb19 0309 	adds.w	r3, r9, r9
 80034e8:	eb4a 040a 	adc.w	r4, sl, sl
 80034ec:	4699      	mov	r9, r3
 80034ee:	46a2      	mov	sl, r4
 80034f0:	eb19 090b 	adds.w	r9, r9, fp
 80034f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800350c:	4689      	mov	r9, r1
 800350e:	4692      	mov	sl, r2
 8003510:	eb1b 0509 	adds.w	r5, fp, r9
 8003514:	eb4c 060a 	adc.w	r6, ip, sl
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4619      	mov	r1, r3
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f04f 0400 	mov.w	r4, #0
 800352a:	0094      	lsls	r4, r2, #2
 800352c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003530:	008b      	lsls	r3, r1, #2
 8003532:	461a      	mov	r2, r3
 8003534:	4623      	mov	r3, r4
 8003536:	4628      	mov	r0, r5
 8003538:	4631      	mov	r1, r6
 800353a:	f7fc fea9 	bl	8000290 <__aeabi_uldivmod>
 800353e:	4603      	mov	r3, r0
 8003540:	460c      	mov	r4, r1
 8003542:	461a      	mov	r2, r3
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <UART_SetConfig+0x6f4>)
 8003546:	fba3 1302 	umull	r1, r3, r3, r2
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2164      	movs	r1, #100	; 0x64
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	3332      	adds	r3, #50	; 0x32
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <UART_SetConfig+0x6f4>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	f003 020f 	and.w	r2, r3, #15
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4442      	add	r2, r8
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	e7ff      	b.n	800356e <UART_SetConfig+0x6e2>
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003578:	40011000 	.word	0x40011000
 800357c:	40011400 	.word	0x40011400
 8003580:	51eb851f 	.word	0x51eb851f

08003584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003584:	b084      	sub	sp, #16
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	f107 001c 	add.w	r0, r7, #28
 8003592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	2b01      	cmp	r3, #1
 800359a:	d122      	bne.n	80035e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fa56 	bl	8003a88 <USB_CoreReset>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e01a      	b.n	8003618 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa4a 	bl	8003a88 <USB_CoreReset>
 80035f4:	4603      	mov	r3, r0
 80035f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
 800360a:	e005      	b.n	8003618 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10b      	bne.n	8003636 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f043 0206 	orr.w	r2, r3, #6
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003642:	b004      	add	sp, #16
 8003644:	4770      	bx	lr

08003646 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d106      	bne.n	8003694 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	e00b      	b.n	80036ac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	e001      	b.n	80036ac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e003      	b.n	80036b4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80036ac:	2032      	movs	r0, #50	; 0x32
 80036ae:	f7fd fe37 	bl	8001320 <HAL_Delay>

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036bc:	b084      	sub	sp, #16
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	e009      	b.n	80036f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	3340      	adds	r3, #64	; 0x40
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	2200      	movs	r2, #0
 80036e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	3301      	adds	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b0e      	cmp	r3, #14
 80036f4:	d9f2      	bls.n	80036dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11c      	bne.n	8003736 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
 8003734:	e00b      	b.n	800374e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003754:	461a      	mov	r2, r3
 8003756:	2300      	movs	r3, #0
 8003758:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	4619      	mov	r1, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003768:	461a      	mov	r2, r3
 800376a:	680b      	ldr	r3, [r1, #0]
 800376c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10c      	bne.n	800378e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800377a:	2100      	movs	r1, #0
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f949 	bl	8003a14 <USB_SetDevSpeed>
 8003782:	e008      	b.n	8003796 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003784:	2101      	movs	r1, #1
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f944 	bl	8003a14 <USB_SetDevSpeed>
 800378c:	e003      	b.n	8003796 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800378e:	2103      	movs	r1, #3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f93f 	bl	8003a14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003796:	2110      	movs	r1, #16
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8f3 	bl	8003984 <USB_FlushTxFifo>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f911 	bl	80039d0 <USB_FlushRxFifo>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	461a      	mov	r2, r3
 80037d8:	2300      	movs	r3, #0
 80037da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	e043      	b.n	800386a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037f8:	d118      	bne.n	800382c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	461a      	mov	r2, r3
 800380e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e013      	b.n	800383e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	461a      	mov	r2, r3
 8003824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e008      	b.n	800383e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003838:	461a      	mov	r2, r3
 800383a:	2300      	movs	r3, #0
 800383c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384a:	461a      	mov	r2, r3
 800384c:	2300      	movs	r3, #0
 800384e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385c:	461a      	mov	r2, r3
 800385e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	3301      	adds	r3, #1
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	429a      	cmp	r2, r3
 8003870:	d3b7      	bcc.n	80037e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e043      	b.n	8003900 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800388a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800388e:	d118      	bne.n	80038c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a2:	461a      	mov	r2, r3
 80038a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e013      	b.n	80038d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	e008      	b.n	80038d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	2300      	movs	r3, #0
 80038d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e0:	461a      	mov	r2, r3
 80038e2:	2300      	movs	r3, #0
 80038e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3301      	adds	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	429a      	cmp	r2, r3
 8003906:	d3b7      	bcc.n	8003878 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800391a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003928:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f043 0210 	orr.w	r2, r3, #16
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <USB_DevInit+0x2c4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f043 0208 	orr.w	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800397c:	b004      	add	sp, #16
 800397e:	4770      	bx	lr
 8003980:	803c3800 	.word	0x803c3800

08003984 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3301      	adds	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <USB_FlushTxFifo+0x48>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e006      	b.n	80039be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d0f0      	beq.n	800399e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	00030d40 	.word	0x00030d40

080039d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2210      	movs	r2, #16
 80039e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3301      	adds	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <USB_FlushRxFifo+0x40>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e006      	b.n	8003a02 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d0f0      	beq.n	80039e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	00030d40 	.word	0x00030d40

08003a14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a60:	f023 0303 	bic.w	r3, r3, #3
 8003a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <USB_CoreReset+0x64>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e01b      	b.n	8003ade <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	daf2      	bge.n	8003a94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <USB_CoreReset+0x64>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e006      	b.n	8003ade <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d0f0      	beq.n	8003abe <USB_CoreReset+0x36>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	00030d40 	.word	0x00030d40

08003af0 <__errno>:
 8003af0:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <__errno+0x8>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000010 	.word	0x20000010

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4e0d      	ldr	r6, [pc, #52]	; (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1ba4      	subs	r4, r4, r6
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2500      	movs	r5, #0
 8003b08:	42a5      	cmp	r5, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4e0b      	ldr	r6, [pc, #44]	; (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	; (8003b40 <__libc_init_array+0x44>)
 8003b10:	f001 f81e 	bl	8004b50 <_init>
 8003b14:	1ba4      	subs	r4, r4, r6
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2500      	movs	r5, #0
 8003b1a:	42a5      	cmp	r5, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b24:	4798      	blx	r3
 8003b26:	3501      	adds	r5, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b2e:	4798      	blx	r3
 8003b30:	3501      	adds	r5, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08006cf4 	.word	0x08006cf4
 8003b38:	08006cf4 	.word	0x08006cf4
 8003b3c:	08006cf4 	.word	0x08006cf4
 8003b40:	08006cf8 	.word	0x08006cf8

08003b44 <memset>:
 8003b44:	4402      	add	r2, r0
 8003b46:	4603      	mov	r3, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <iprintf>:
 8003b54:	b40f      	push	{r0, r1, r2, r3}
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <iprintf+0x2c>)
 8003b58:	b513      	push	{r0, r1, r4, lr}
 8003b5a:	681c      	ldr	r4, [r3, #0]
 8003b5c:	b124      	cbz	r4, 8003b68 <iprintf+0x14>
 8003b5e:	69a3      	ldr	r3, [r4, #24]
 8003b60:	b913      	cbnz	r3, 8003b68 <iprintf+0x14>
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 fad0 	bl	8004108 <__sinit>
 8003b68:	ab05      	add	r3, sp, #20
 8003b6a:	9a04      	ldr	r2, [sp, #16]
 8003b6c:	68a1      	ldr	r1, [r4, #8]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 fc91 	bl	8004498 <_vfiprintf_r>
 8003b76:	b002      	add	sp, #8
 8003b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b7c:	b004      	add	sp, #16
 8003b7e:	4770      	bx	lr
 8003b80:	20000010 	.word	0x20000010

08003b84 <_puts_r>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	460e      	mov	r6, r1
 8003b88:	4605      	mov	r5, r0
 8003b8a:	b118      	cbz	r0, 8003b94 <_puts_r+0x10>
 8003b8c:	6983      	ldr	r3, [r0, #24]
 8003b8e:	b90b      	cbnz	r3, 8003b94 <_puts_r+0x10>
 8003b90:	f000 faba 	bl	8004108 <__sinit>
 8003b94:	69ab      	ldr	r3, [r5, #24]
 8003b96:	68ac      	ldr	r4, [r5, #8]
 8003b98:	b913      	cbnz	r3, 8003ba0 <_puts_r+0x1c>
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f000 fab4 	bl	8004108 <__sinit>
 8003ba0:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <_puts_r+0xac>)
 8003ba2:	429c      	cmp	r4, r3
 8003ba4:	d117      	bne.n	8003bd6 <_puts_r+0x52>
 8003ba6:	686c      	ldr	r4, [r5, #4]
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	071b      	lsls	r3, r3, #28
 8003bac:	d51d      	bpl.n	8003bea <_puts_r+0x66>
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	b1db      	cbz	r3, 8003bea <_puts_r+0x66>
 8003bb2:	3e01      	subs	r6, #1
 8003bb4:	68a3      	ldr	r3, [r4, #8]
 8003bb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60a3      	str	r3, [r4, #8]
 8003bbe:	b9e9      	cbnz	r1, 8003bfc <_puts_r+0x78>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da2e      	bge.n	8003c22 <_puts_r+0x9e>
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	210a      	movs	r1, #10
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 f8ed 	bl	8003da8 <__swbuf_r>
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d011      	beq.n	8003bf6 <_puts_r+0x72>
 8003bd2:	200a      	movs	r0, #10
 8003bd4:	e011      	b.n	8003bfa <_puts_r+0x76>
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <_puts_r+0xb0>)
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	d101      	bne.n	8003be0 <_puts_r+0x5c>
 8003bdc:	68ac      	ldr	r4, [r5, #8]
 8003bde:	e7e3      	b.n	8003ba8 <_puts_r+0x24>
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <_puts_r+0xb4>)
 8003be2:	429c      	cmp	r4, r3
 8003be4:	bf08      	it	eq
 8003be6:	68ec      	ldreq	r4, [r5, #12]
 8003be8:	e7de      	b.n	8003ba8 <_puts_r+0x24>
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 f92d 	bl	8003e4c <__swsetup_r>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d0dd      	beq.n	8003bb2 <_puts_r+0x2e>
 8003bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	da04      	bge.n	8003c0a <_puts_r+0x86>
 8003c00:	69a2      	ldr	r2, [r4, #24]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	dc06      	bgt.n	8003c14 <_puts_r+0x90>
 8003c06:	290a      	cmp	r1, #10
 8003c08:	d004      	beq.n	8003c14 <_puts_r+0x90>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	6022      	str	r2, [r4, #0]
 8003c10:	7019      	strb	r1, [r3, #0]
 8003c12:	e7cf      	b.n	8003bb4 <_puts_r+0x30>
 8003c14:	4622      	mov	r2, r4
 8003c16:	4628      	mov	r0, r5
 8003c18:	f000 f8c6 	bl	8003da8 <__swbuf_r>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d1c9      	bne.n	8003bb4 <_puts_r+0x30>
 8003c20:	e7e9      	b.n	8003bf6 <_puts_r+0x72>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	200a      	movs	r0, #10
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	6022      	str	r2, [r4, #0]
 8003c2a:	7018      	strb	r0, [r3, #0]
 8003c2c:	e7e5      	b.n	8003bfa <_puts_r+0x76>
 8003c2e:	bf00      	nop
 8003c30:	08006c78 	.word	0x08006c78
 8003c34:	08006c98 	.word	0x08006c98
 8003c38:	08006c58 	.word	0x08006c58

08003c3c <puts>:
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <puts+0xc>)
 8003c3e:	4601      	mov	r1, r0
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f7ff bf9f 	b.w	8003b84 <_puts_r>
 8003c46:	bf00      	nop
 8003c48:	20000010 	.word	0x20000010

08003c4c <setvbuf>:
 8003c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c50:	461d      	mov	r5, r3
 8003c52:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <setvbuf+0x14c>)
 8003c54:	681e      	ldr	r6, [r3, #0]
 8003c56:	4604      	mov	r4, r0
 8003c58:	460f      	mov	r7, r1
 8003c5a:	4690      	mov	r8, r2
 8003c5c:	b126      	cbz	r6, 8003c68 <setvbuf+0x1c>
 8003c5e:	69b3      	ldr	r3, [r6, #24]
 8003c60:	b913      	cbnz	r3, 8003c68 <setvbuf+0x1c>
 8003c62:	4630      	mov	r0, r6
 8003c64:	f000 fa50 	bl	8004108 <__sinit>
 8003c68:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <setvbuf+0x150>)
 8003c6a:	429c      	cmp	r4, r3
 8003c6c:	d152      	bne.n	8003d14 <setvbuf+0xc8>
 8003c6e:	6874      	ldr	r4, [r6, #4]
 8003c70:	f1b8 0f02 	cmp.w	r8, #2
 8003c74:	d006      	beq.n	8003c84 <setvbuf+0x38>
 8003c76:	f1b8 0f01 	cmp.w	r8, #1
 8003c7a:	f200 8089 	bhi.w	8003d90 <setvbuf+0x144>
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	f2c0 8086 	blt.w	8003d90 <setvbuf+0x144>
 8003c84:	4621      	mov	r1, r4
 8003c86:	4630      	mov	r0, r6
 8003c88:	f000 f9d4 	bl	8004034 <_fflush_r>
 8003c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c8e:	b141      	cbz	r1, 8003ca2 <setvbuf+0x56>
 8003c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c94:	4299      	cmp	r1, r3
 8003c96:	d002      	beq.n	8003c9e <setvbuf+0x52>
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f000 fb2b 	bl	80042f4 <_free_r>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	6363      	str	r3, [r4, #52]	; 0x34
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61a3      	str	r3, [r4, #24]
 8003ca6:	6063      	str	r3, [r4, #4]
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	061b      	lsls	r3, r3, #24
 8003cac:	d503      	bpl.n	8003cb6 <setvbuf+0x6a>
 8003cae:	6921      	ldr	r1, [r4, #16]
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f000 fb1f 	bl	80042f4 <_free_r>
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003cbc:	f023 0303 	bic.w	r3, r3, #3
 8003cc0:	f1b8 0f02 	cmp.w	r8, #2
 8003cc4:	81a3      	strh	r3, [r4, #12]
 8003cc6:	d05d      	beq.n	8003d84 <setvbuf+0x138>
 8003cc8:	ab01      	add	r3, sp, #4
 8003cca:	466a      	mov	r2, sp
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f000 faa4 	bl	800421c <__swhatbuf_r>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	4318      	orrs	r0, r3
 8003cd8:	81a0      	strh	r0, [r4, #12]
 8003cda:	bb2d      	cbnz	r5, 8003d28 <setvbuf+0xdc>
 8003cdc:	9d00      	ldr	r5, [sp, #0]
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 fb00 	bl	80042e4 <malloc>
 8003ce4:	4607      	mov	r7, r0
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d14e      	bne.n	8003d88 <setvbuf+0x13c>
 8003cea:	f8dd 9000 	ldr.w	r9, [sp]
 8003cee:	45a9      	cmp	r9, r5
 8003cf0:	d13c      	bne.n	8003d6c <setvbuf+0x120>
 8003cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60a3      	str	r3, [r4, #8]
 8003d02:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	6123      	str	r3, [r4, #16]
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	6163      	str	r3, [r4, #20]
 8003d0e:	b003      	add	sp, #12
 8003d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <setvbuf+0x154>)
 8003d16:	429c      	cmp	r4, r3
 8003d18:	d101      	bne.n	8003d1e <setvbuf+0xd2>
 8003d1a:	68b4      	ldr	r4, [r6, #8]
 8003d1c:	e7a8      	b.n	8003c70 <setvbuf+0x24>
 8003d1e:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <setvbuf+0x158>)
 8003d20:	429c      	cmp	r4, r3
 8003d22:	bf08      	it	eq
 8003d24:	68f4      	ldreq	r4, [r6, #12]
 8003d26:	e7a3      	b.n	8003c70 <setvbuf+0x24>
 8003d28:	2f00      	cmp	r7, #0
 8003d2a:	d0d8      	beq.n	8003cde <setvbuf+0x92>
 8003d2c:	69b3      	ldr	r3, [r6, #24]
 8003d2e:	b913      	cbnz	r3, 8003d36 <setvbuf+0xea>
 8003d30:	4630      	mov	r0, r6
 8003d32:	f000 f9e9 	bl	8004108 <__sinit>
 8003d36:	f1b8 0f01 	cmp.w	r8, #1
 8003d3a:	bf08      	it	eq
 8003d3c:	89a3      	ldrheq	r3, [r4, #12]
 8003d3e:	6027      	str	r7, [r4, #0]
 8003d40:	bf04      	itt	eq
 8003d42:	f043 0301 	orreq.w	r3, r3, #1
 8003d46:	81a3      	strheq	r3, [r4, #12]
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	f013 0008 	ands.w	r0, r3, #8
 8003d4e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003d52:	d01b      	beq.n	8003d8c <setvbuf+0x140>
 8003d54:	f013 0001 	ands.w	r0, r3, #1
 8003d58:	bf18      	it	ne
 8003d5a:	426d      	negne	r5, r5
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	bf1d      	ittte	ne
 8003d62:	60a3      	strne	r3, [r4, #8]
 8003d64:	61a5      	strne	r5, [r4, #24]
 8003d66:	4618      	movne	r0, r3
 8003d68:	60a5      	streq	r5, [r4, #8]
 8003d6a:	e7d0      	b.n	8003d0e <setvbuf+0xc2>
 8003d6c:	4648      	mov	r0, r9
 8003d6e:	f000 fab9 	bl	80042e4 <malloc>
 8003d72:	4607      	mov	r7, r0
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d0bc      	beq.n	8003cf2 <setvbuf+0xa6>
 8003d78:	89a3      	ldrh	r3, [r4, #12]
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7e:	81a3      	strh	r3, [r4, #12]
 8003d80:	464d      	mov	r5, r9
 8003d82:	e7d3      	b.n	8003d2c <setvbuf+0xe0>
 8003d84:	2000      	movs	r0, #0
 8003d86:	e7b6      	b.n	8003cf6 <setvbuf+0xaa>
 8003d88:	46a9      	mov	r9, r5
 8003d8a:	e7f5      	b.n	8003d78 <setvbuf+0x12c>
 8003d8c:	60a0      	str	r0, [r4, #8]
 8003d8e:	e7be      	b.n	8003d0e <setvbuf+0xc2>
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d94:	e7bb      	b.n	8003d0e <setvbuf+0xc2>
 8003d96:	bf00      	nop
 8003d98:	20000010 	.word	0x20000010
 8003d9c:	08006c78 	.word	0x08006c78
 8003da0:	08006c98 	.word	0x08006c98
 8003da4:	08006c58 	.word	0x08006c58

08003da8 <__swbuf_r>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	460e      	mov	r6, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	4605      	mov	r5, r0
 8003db0:	b118      	cbz	r0, 8003dba <__swbuf_r+0x12>
 8003db2:	6983      	ldr	r3, [r0, #24]
 8003db4:	b90b      	cbnz	r3, 8003dba <__swbuf_r+0x12>
 8003db6:	f000 f9a7 	bl	8004108 <__sinit>
 8003dba:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <__swbuf_r+0x98>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	d12a      	bne.n	8003e16 <__swbuf_r+0x6e>
 8003dc0:	686c      	ldr	r4, [r5, #4]
 8003dc2:	69a3      	ldr	r3, [r4, #24]
 8003dc4:	60a3      	str	r3, [r4, #8]
 8003dc6:	89a3      	ldrh	r3, [r4, #12]
 8003dc8:	071a      	lsls	r2, r3, #28
 8003dca:	d52e      	bpl.n	8003e2a <__swbuf_r+0x82>
 8003dcc:	6923      	ldr	r3, [r4, #16]
 8003dce:	b363      	cbz	r3, 8003e2a <__swbuf_r+0x82>
 8003dd0:	6923      	ldr	r3, [r4, #16]
 8003dd2:	6820      	ldr	r0, [r4, #0]
 8003dd4:	1ac0      	subs	r0, r0, r3
 8003dd6:	6963      	ldr	r3, [r4, #20]
 8003dd8:	b2f6      	uxtb	r6, r6
 8003dda:	4283      	cmp	r3, r0
 8003ddc:	4637      	mov	r7, r6
 8003dde:	dc04      	bgt.n	8003dea <__swbuf_r+0x42>
 8003de0:	4621      	mov	r1, r4
 8003de2:	4628      	mov	r0, r5
 8003de4:	f000 f926 	bl	8004034 <_fflush_r>
 8003de8:	bb28      	cbnz	r0, 8003e36 <__swbuf_r+0x8e>
 8003dea:	68a3      	ldr	r3, [r4, #8]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	60a3      	str	r3, [r4, #8]
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	6022      	str	r2, [r4, #0]
 8003df6:	701e      	strb	r6, [r3, #0]
 8003df8:	6963      	ldr	r3, [r4, #20]
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	4283      	cmp	r3, r0
 8003dfe:	d004      	beq.n	8003e0a <__swbuf_r+0x62>
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	07db      	lsls	r3, r3, #31
 8003e04:	d519      	bpl.n	8003e3a <__swbuf_r+0x92>
 8003e06:	2e0a      	cmp	r6, #10
 8003e08:	d117      	bne.n	8003e3a <__swbuf_r+0x92>
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f911 	bl	8004034 <_fflush_r>
 8003e12:	b190      	cbz	r0, 8003e3a <__swbuf_r+0x92>
 8003e14:	e00f      	b.n	8003e36 <__swbuf_r+0x8e>
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <__swbuf_r+0x9c>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d101      	bne.n	8003e20 <__swbuf_r+0x78>
 8003e1c:	68ac      	ldr	r4, [r5, #8]
 8003e1e:	e7d0      	b.n	8003dc2 <__swbuf_r+0x1a>
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <__swbuf_r+0xa0>)
 8003e22:	429c      	cmp	r4, r3
 8003e24:	bf08      	it	eq
 8003e26:	68ec      	ldreq	r4, [r5, #12]
 8003e28:	e7cb      	b.n	8003dc2 <__swbuf_r+0x1a>
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 f80d 	bl	8003e4c <__swsetup_r>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d0cc      	beq.n	8003dd0 <__swbuf_r+0x28>
 8003e36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	08006c78 	.word	0x08006c78
 8003e44:	08006c98 	.word	0x08006c98
 8003e48:	08006c58 	.word	0x08006c58

08003e4c <__swsetup_r>:
 8003e4c:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <__swsetup_r+0xcc>)
 8003e4e:	b570      	push	{r4, r5, r6, lr}
 8003e50:	681d      	ldr	r5, [r3, #0]
 8003e52:	4606      	mov	r6, r0
 8003e54:	460c      	mov	r4, r1
 8003e56:	b125      	cbz	r5, 8003e62 <__swsetup_r+0x16>
 8003e58:	69ab      	ldr	r3, [r5, #24]
 8003e5a:	b913      	cbnz	r3, 8003e62 <__swsetup_r+0x16>
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f953 	bl	8004108 <__sinit>
 8003e62:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <__swsetup_r+0xd0>)
 8003e64:	429c      	cmp	r4, r3
 8003e66:	d10f      	bne.n	8003e88 <__swsetup_r+0x3c>
 8003e68:	686c      	ldr	r4, [r5, #4]
 8003e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	0715      	lsls	r5, r2, #28
 8003e72:	d42c      	bmi.n	8003ece <__swsetup_r+0x82>
 8003e74:	06d0      	lsls	r0, r2, #27
 8003e76:	d411      	bmi.n	8003e9c <__swsetup_r+0x50>
 8003e78:	2209      	movs	r2, #9
 8003e7a:	6032      	str	r2, [r6, #0]
 8003e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e80:	81a3      	strh	r3, [r4, #12]
 8003e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e86:	e03e      	b.n	8003f06 <__swsetup_r+0xba>
 8003e88:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <__swsetup_r+0xd4>)
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	d101      	bne.n	8003e92 <__swsetup_r+0x46>
 8003e8e:	68ac      	ldr	r4, [r5, #8]
 8003e90:	e7eb      	b.n	8003e6a <__swsetup_r+0x1e>
 8003e92:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <__swsetup_r+0xd8>)
 8003e94:	429c      	cmp	r4, r3
 8003e96:	bf08      	it	eq
 8003e98:	68ec      	ldreq	r4, [r5, #12]
 8003e9a:	e7e6      	b.n	8003e6a <__swsetup_r+0x1e>
 8003e9c:	0751      	lsls	r1, r2, #29
 8003e9e:	d512      	bpl.n	8003ec6 <__swsetup_r+0x7a>
 8003ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ea2:	b141      	cbz	r1, 8003eb6 <__swsetup_r+0x6a>
 8003ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ea8:	4299      	cmp	r1, r3
 8003eaa:	d002      	beq.n	8003eb2 <__swsetup_r+0x66>
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 fa21 	bl	80042f4 <_free_r>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8003eb6:	89a3      	ldrh	r3, [r4, #12]
 8003eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	6063      	str	r3, [r4, #4]
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	f043 0308 	orr.w	r3, r3, #8
 8003ecc:	81a3      	strh	r3, [r4, #12]
 8003ece:	6923      	ldr	r3, [r4, #16]
 8003ed0:	b94b      	cbnz	r3, 8003ee6 <__swsetup_r+0x9a>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003edc:	d003      	beq.n	8003ee6 <__swsetup_r+0x9a>
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4630      	mov	r0, r6
 8003ee2:	f000 f9bf 	bl	8004264 <__smakebuf_r>
 8003ee6:	89a2      	ldrh	r2, [r4, #12]
 8003ee8:	f012 0301 	ands.w	r3, r2, #1
 8003eec:	d00c      	beq.n	8003f08 <__swsetup_r+0xbc>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	6963      	ldr	r3, [r4, #20]
 8003ef4:	425b      	negs	r3, r3
 8003ef6:	61a3      	str	r3, [r4, #24]
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	b953      	cbnz	r3, 8003f12 <__swsetup_r+0xc6>
 8003efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003f04:	d1ba      	bne.n	8003e7c <__swsetup_r+0x30>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	0792      	lsls	r2, r2, #30
 8003f0a:	bf58      	it	pl
 8003f0c:	6963      	ldrpl	r3, [r4, #20]
 8003f0e:	60a3      	str	r3, [r4, #8]
 8003f10:	e7f2      	b.n	8003ef8 <__swsetup_r+0xac>
 8003f12:	2000      	movs	r0, #0
 8003f14:	e7f7      	b.n	8003f06 <__swsetup_r+0xba>
 8003f16:	bf00      	nop
 8003f18:	20000010 	.word	0x20000010
 8003f1c:	08006c78 	.word	0x08006c78
 8003f20:	08006c98 	.word	0x08006c98
 8003f24:	08006c58 	.word	0x08006c58

08003f28 <__sflush_r>:
 8003f28:	898a      	ldrh	r2, [r1, #12]
 8003f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2e:	4605      	mov	r5, r0
 8003f30:	0710      	lsls	r0, r2, #28
 8003f32:	460c      	mov	r4, r1
 8003f34:	d458      	bmi.n	8003fe8 <__sflush_r+0xc0>
 8003f36:	684b      	ldr	r3, [r1, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dc05      	bgt.n	8003f48 <__sflush_r+0x20>
 8003f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	dc02      	bgt.n	8003f48 <__sflush_r+0x20>
 8003f42:	2000      	movs	r0, #0
 8003f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f4a:	2e00      	cmp	r6, #0
 8003f4c:	d0f9      	beq.n	8003f42 <__sflush_r+0x1a>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f54:	682f      	ldr	r7, [r5, #0]
 8003f56:	6a21      	ldr	r1, [r4, #32]
 8003f58:	602b      	str	r3, [r5, #0]
 8003f5a:	d032      	beq.n	8003fc2 <__sflush_r+0x9a>
 8003f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	075a      	lsls	r2, r3, #29
 8003f62:	d505      	bpl.n	8003f70 <__sflush_r+0x48>
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	1ac0      	subs	r0, r0, r3
 8003f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f6a:	b10b      	cbz	r3, 8003f70 <__sflush_r+0x48>
 8003f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f6e:	1ac0      	subs	r0, r0, r3
 8003f70:	2300      	movs	r3, #0
 8003f72:	4602      	mov	r2, r0
 8003f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f76:	6a21      	ldr	r1, [r4, #32]
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b0      	blx	r6
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	89a3      	ldrh	r3, [r4, #12]
 8003f80:	d106      	bne.n	8003f90 <__sflush_r+0x68>
 8003f82:	6829      	ldr	r1, [r5, #0]
 8003f84:	291d      	cmp	r1, #29
 8003f86:	d848      	bhi.n	800401a <__sflush_r+0xf2>
 8003f88:	4a29      	ldr	r2, [pc, #164]	; (8004030 <__sflush_r+0x108>)
 8003f8a:	40ca      	lsrs	r2, r1
 8003f8c:	07d6      	lsls	r6, r2, #31
 8003f8e:	d544      	bpl.n	800401a <__sflush_r+0xf2>
 8003f90:	2200      	movs	r2, #0
 8003f92:	6062      	str	r2, [r4, #4]
 8003f94:	04d9      	lsls	r1, r3, #19
 8003f96:	6922      	ldr	r2, [r4, #16]
 8003f98:	6022      	str	r2, [r4, #0]
 8003f9a:	d504      	bpl.n	8003fa6 <__sflush_r+0x7e>
 8003f9c:	1c42      	adds	r2, r0, #1
 8003f9e:	d101      	bne.n	8003fa4 <__sflush_r+0x7c>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b903      	cbnz	r3, 8003fa6 <__sflush_r+0x7e>
 8003fa4:	6560      	str	r0, [r4, #84]	; 0x54
 8003fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fa8:	602f      	str	r7, [r5, #0]
 8003faa:	2900      	cmp	r1, #0
 8003fac:	d0c9      	beq.n	8003f42 <__sflush_r+0x1a>
 8003fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	d002      	beq.n	8003fbc <__sflush_r+0x94>
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f000 f99c 	bl	80042f4 <_free_r>
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	6360      	str	r0, [r4, #52]	; 0x34
 8003fc0:	e7c0      	b.n	8003f44 <__sflush_r+0x1c>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b0      	blx	r6
 8003fc8:	1c41      	adds	r1, r0, #1
 8003fca:	d1c8      	bne.n	8003f5e <__sflush_r+0x36>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0c5      	beq.n	8003f5e <__sflush_r+0x36>
 8003fd2:	2b1d      	cmp	r3, #29
 8003fd4:	d001      	beq.n	8003fda <__sflush_r+0xb2>
 8003fd6:	2b16      	cmp	r3, #22
 8003fd8:	d101      	bne.n	8003fde <__sflush_r+0xb6>
 8003fda:	602f      	str	r7, [r5, #0]
 8003fdc:	e7b1      	b.n	8003f42 <__sflush_r+0x1a>
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe4:	81a3      	strh	r3, [r4, #12]
 8003fe6:	e7ad      	b.n	8003f44 <__sflush_r+0x1c>
 8003fe8:	690f      	ldr	r7, [r1, #16]
 8003fea:	2f00      	cmp	r7, #0
 8003fec:	d0a9      	beq.n	8003f42 <__sflush_r+0x1a>
 8003fee:	0793      	lsls	r3, r2, #30
 8003ff0:	680e      	ldr	r6, [r1, #0]
 8003ff2:	bf08      	it	eq
 8003ff4:	694b      	ldreq	r3, [r1, #20]
 8003ff6:	600f      	str	r7, [r1, #0]
 8003ff8:	bf18      	it	ne
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	eba6 0807 	sub.w	r8, r6, r7
 8004000:	608b      	str	r3, [r1, #8]
 8004002:	f1b8 0f00 	cmp.w	r8, #0
 8004006:	dd9c      	ble.n	8003f42 <__sflush_r+0x1a>
 8004008:	4643      	mov	r3, r8
 800400a:	463a      	mov	r2, r7
 800400c:	6a21      	ldr	r1, [r4, #32]
 800400e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004010:	4628      	mov	r0, r5
 8004012:	47b0      	blx	r6
 8004014:	2800      	cmp	r0, #0
 8004016:	dc06      	bgt.n	8004026 <__sflush_r+0xfe>
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401e:	81a3      	strh	r3, [r4, #12]
 8004020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004024:	e78e      	b.n	8003f44 <__sflush_r+0x1c>
 8004026:	4407      	add	r7, r0
 8004028:	eba8 0800 	sub.w	r8, r8, r0
 800402c:	e7e9      	b.n	8004002 <__sflush_r+0xda>
 800402e:	bf00      	nop
 8004030:	20400001 	.word	0x20400001

08004034 <_fflush_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	690b      	ldr	r3, [r1, #16]
 8004038:	4605      	mov	r5, r0
 800403a:	460c      	mov	r4, r1
 800403c:	b1db      	cbz	r3, 8004076 <_fflush_r+0x42>
 800403e:	b118      	cbz	r0, 8004048 <_fflush_r+0x14>
 8004040:	6983      	ldr	r3, [r0, #24]
 8004042:	b90b      	cbnz	r3, 8004048 <_fflush_r+0x14>
 8004044:	f000 f860 	bl	8004108 <__sinit>
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <_fflush_r+0x48>)
 800404a:	429c      	cmp	r4, r3
 800404c:	d109      	bne.n	8004062 <_fflush_r+0x2e>
 800404e:	686c      	ldr	r4, [r5, #4]
 8004050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004054:	b17b      	cbz	r3, 8004076 <_fflush_r+0x42>
 8004056:	4621      	mov	r1, r4
 8004058:	4628      	mov	r0, r5
 800405a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800405e:	f7ff bf63 	b.w	8003f28 <__sflush_r>
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <_fflush_r+0x4c>)
 8004064:	429c      	cmp	r4, r3
 8004066:	d101      	bne.n	800406c <_fflush_r+0x38>
 8004068:	68ac      	ldr	r4, [r5, #8]
 800406a:	e7f1      	b.n	8004050 <_fflush_r+0x1c>
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <_fflush_r+0x50>)
 800406e:	429c      	cmp	r4, r3
 8004070:	bf08      	it	eq
 8004072:	68ec      	ldreq	r4, [r5, #12]
 8004074:	e7ec      	b.n	8004050 <_fflush_r+0x1c>
 8004076:	2000      	movs	r0, #0
 8004078:	bd38      	pop	{r3, r4, r5, pc}
 800407a:	bf00      	nop
 800407c:	08006c78 	.word	0x08006c78
 8004080:	08006c98 	.word	0x08006c98
 8004084:	08006c58 	.word	0x08006c58

08004088 <std>:
 8004088:	2300      	movs	r3, #0
 800408a:	b510      	push	{r4, lr}
 800408c:	4604      	mov	r4, r0
 800408e:	e9c0 3300 	strd	r3, r3, [r0]
 8004092:	6083      	str	r3, [r0, #8]
 8004094:	8181      	strh	r1, [r0, #12]
 8004096:	6643      	str	r3, [r0, #100]	; 0x64
 8004098:	81c2      	strh	r2, [r0, #14]
 800409a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800409e:	6183      	str	r3, [r0, #24]
 80040a0:	4619      	mov	r1, r3
 80040a2:	2208      	movs	r2, #8
 80040a4:	305c      	adds	r0, #92	; 0x5c
 80040a6:	f7ff fd4d 	bl	8003b44 <memset>
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <std+0x38>)
 80040ac:	6263      	str	r3, [r4, #36]	; 0x24
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <std+0x3c>)
 80040b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <std+0x40>)
 80040b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <std+0x44>)
 80040b8:	6224      	str	r4, [r4, #32]
 80040ba:	6323      	str	r3, [r4, #48]	; 0x30
 80040bc:	bd10      	pop	{r4, pc}
 80040be:	bf00      	nop
 80040c0:	080049f5 	.word	0x080049f5
 80040c4:	08004a17 	.word	0x08004a17
 80040c8:	08004a4f 	.word	0x08004a4f
 80040cc:	08004a73 	.word	0x08004a73

080040d0 <_cleanup_r>:
 80040d0:	4901      	ldr	r1, [pc, #4]	; (80040d8 <_cleanup_r+0x8>)
 80040d2:	f000 b885 	b.w	80041e0 <_fwalk_reent>
 80040d6:	bf00      	nop
 80040d8:	08004035 	.word	0x08004035

080040dc <__sfmoreglue>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	1e4a      	subs	r2, r1, #1
 80040e0:	2568      	movs	r5, #104	; 0x68
 80040e2:	4355      	muls	r5, r2
 80040e4:	460e      	mov	r6, r1
 80040e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040ea:	f000 f951 	bl	8004390 <_malloc_r>
 80040ee:	4604      	mov	r4, r0
 80040f0:	b140      	cbz	r0, 8004104 <__sfmoreglue+0x28>
 80040f2:	2100      	movs	r1, #0
 80040f4:	e9c0 1600 	strd	r1, r6, [r0]
 80040f8:	300c      	adds	r0, #12
 80040fa:	60a0      	str	r0, [r4, #8]
 80040fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004100:	f7ff fd20 	bl	8003b44 <memset>
 8004104:	4620      	mov	r0, r4
 8004106:	bd70      	pop	{r4, r5, r6, pc}

08004108 <__sinit>:
 8004108:	6983      	ldr	r3, [r0, #24]
 800410a:	b510      	push	{r4, lr}
 800410c:	4604      	mov	r4, r0
 800410e:	bb33      	cbnz	r3, 800415e <__sinit+0x56>
 8004110:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004114:	6503      	str	r3, [r0, #80]	; 0x50
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <__sinit+0x58>)
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <__sinit+0x5c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6282      	str	r2, [r0, #40]	; 0x28
 800411e:	4298      	cmp	r0, r3
 8004120:	bf04      	itt	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	6183      	streq	r3, [r0, #24]
 8004126:	f000 f81f 	bl	8004168 <__sfp>
 800412a:	6060      	str	r0, [r4, #4]
 800412c:	4620      	mov	r0, r4
 800412e:	f000 f81b 	bl	8004168 <__sfp>
 8004132:	60a0      	str	r0, [r4, #8]
 8004134:	4620      	mov	r0, r4
 8004136:	f000 f817 	bl	8004168 <__sfp>
 800413a:	2200      	movs	r2, #0
 800413c:	60e0      	str	r0, [r4, #12]
 800413e:	2104      	movs	r1, #4
 8004140:	6860      	ldr	r0, [r4, #4]
 8004142:	f7ff ffa1 	bl	8004088 <std>
 8004146:	2201      	movs	r2, #1
 8004148:	2109      	movs	r1, #9
 800414a:	68a0      	ldr	r0, [r4, #8]
 800414c:	f7ff ff9c 	bl	8004088 <std>
 8004150:	2202      	movs	r2, #2
 8004152:	2112      	movs	r1, #18
 8004154:	68e0      	ldr	r0, [r4, #12]
 8004156:	f7ff ff97 	bl	8004088 <std>
 800415a:	2301      	movs	r3, #1
 800415c:	61a3      	str	r3, [r4, #24]
 800415e:	bd10      	pop	{r4, pc}
 8004160:	08006c54 	.word	0x08006c54
 8004164:	080040d1 	.word	0x080040d1

08004168 <__sfp>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <__sfp+0x70>)
 800416c:	681e      	ldr	r6, [r3, #0]
 800416e:	69b3      	ldr	r3, [r6, #24]
 8004170:	4607      	mov	r7, r0
 8004172:	b913      	cbnz	r3, 800417a <__sfp+0x12>
 8004174:	4630      	mov	r0, r6
 8004176:	f7ff ffc7 	bl	8004108 <__sinit>
 800417a:	3648      	adds	r6, #72	; 0x48
 800417c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004180:	3b01      	subs	r3, #1
 8004182:	d503      	bpl.n	800418c <__sfp+0x24>
 8004184:	6833      	ldr	r3, [r6, #0]
 8004186:	b133      	cbz	r3, 8004196 <__sfp+0x2e>
 8004188:	6836      	ldr	r6, [r6, #0]
 800418a:	e7f7      	b.n	800417c <__sfp+0x14>
 800418c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004190:	b16d      	cbz	r5, 80041ae <__sfp+0x46>
 8004192:	3468      	adds	r4, #104	; 0x68
 8004194:	e7f4      	b.n	8004180 <__sfp+0x18>
 8004196:	2104      	movs	r1, #4
 8004198:	4638      	mov	r0, r7
 800419a:	f7ff ff9f 	bl	80040dc <__sfmoreglue>
 800419e:	6030      	str	r0, [r6, #0]
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d1f1      	bne.n	8004188 <__sfp+0x20>
 80041a4:	230c      	movs	r3, #12
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4604      	mov	r4, r0
 80041aa:	4620      	mov	r0, r4
 80041ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <__sfp+0x74>)
 80041b0:	6665      	str	r5, [r4, #100]	; 0x64
 80041b2:	e9c4 5500 	strd	r5, r5, [r4]
 80041b6:	60a5      	str	r5, [r4, #8]
 80041b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80041bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80041c0:	2208      	movs	r2, #8
 80041c2:	4629      	mov	r1, r5
 80041c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041c8:	f7ff fcbc 	bl	8003b44 <memset>
 80041cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041d4:	e7e9      	b.n	80041aa <__sfp+0x42>
 80041d6:	bf00      	nop
 80041d8:	08006c54 	.word	0x08006c54
 80041dc:	ffff0001 	.word	0xffff0001

080041e0 <_fwalk_reent>:
 80041e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e4:	4680      	mov	r8, r0
 80041e6:	4689      	mov	r9, r1
 80041e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041ec:	2600      	movs	r6, #0
 80041ee:	b914      	cbnz	r4, 80041f6 <_fwalk_reent+0x16>
 80041f0:	4630      	mov	r0, r6
 80041f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80041fa:	3f01      	subs	r7, #1
 80041fc:	d501      	bpl.n	8004202 <_fwalk_reent+0x22>
 80041fe:	6824      	ldr	r4, [r4, #0]
 8004200:	e7f5      	b.n	80041ee <_fwalk_reent+0xe>
 8004202:	89ab      	ldrh	r3, [r5, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d907      	bls.n	8004218 <_fwalk_reent+0x38>
 8004208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800420c:	3301      	adds	r3, #1
 800420e:	d003      	beq.n	8004218 <_fwalk_reent+0x38>
 8004210:	4629      	mov	r1, r5
 8004212:	4640      	mov	r0, r8
 8004214:	47c8      	blx	r9
 8004216:	4306      	orrs	r6, r0
 8004218:	3568      	adds	r5, #104	; 0x68
 800421a:	e7ee      	b.n	80041fa <_fwalk_reent+0x1a>

0800421c <__swhatbuf_r>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	460e      	mov	r6, r1
 8004220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004224:	2900      	cmp	r1, #0
 8004226:	b096      	sub	sp, #88	; 0x58
 8004228:	4614      	mov	r4, r2
 800422a:	461d      	mov	r5, r3
 800422c:	da07      	bge.n	800423e <__swhatbuf_r+0x22>
 800422e:	2300      	movs	r3, #0
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	89b3      	ldrh	r3, [r6, #12]
 8004234:	061a      	lsls	r2, r3, #24
 8004236:	d410      	bmi.n	800425a <__swhatbuf_r+0x3e>
 8004238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800423c:	e00e      	b.n	800425c <__swhatbuf_r+0x40>
 800423e:	466a      	mov	r2, sp
 8004240:	f000 fc3e 	bl	8004ac0 <_fstat_r>
 8004244:	2800      	cmp	r0, #0
 8004246:	dbf2      	blt.n	800422e <__swhatbuf_r+0x12>
 8004248:	9a01      	ldr	r2, [sp, #4]
 800424a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800424e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004252:	425a      	negs	r2, r3
 8004254:	415a      	adcs	r2, r3
 8004256:	602a      	str	r2, [r5, #0]
 8004258:	e7ee      	b.n	8004238 <__swhatbuf_r+0x1c>
 800425a:	2340      	movs	r3, #64	; 0x40
 800425c:	2000      	movs	r0, #0
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	b016      	add	sp, #88	; 0x58
 8004262:	bd70      	pop	{r4, r5, r6, pc}

08004264 <__smakebuf_r>:
 8004264:	898b      	ldrh	r3, [r1, #12]
 8004266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004268:	079d      	lsls	r5, r3, #30
 800426a:	4606      	mov	r6, r0
 800426c:	460c      	mov	r4, r1
 800426e:	d507      	bpl.n	8004280 <__smakebuf_r+0x1c>
 8004270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	2301      	movs	r3, #1
 800427a:	6163      	str	r3, [r4, #20]
 800427c:	b002      	add	sp, #8
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	ab01      	add	r3, sp, #4
 8004282:	466a      	mov	r2, sp
 8004284:	f7ff ffca 	bl	800421c <__swhatbuf_r>
 8004288:	9900      	ldr	r1, [sp, #0]
 800428a:	4605      	mov	r5, r0
 800428c:	4630      	mov	r0, r6
 800428e:	f000 f87f 	bl	8004390 <_malloc_r>
 8004292:	b948      	cbnz	r0, 80042a8 <__smakebuf_r+0x44>
 8004294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004298:	059a      	lsls	r2, r3, #22
 800429a:	d4ef      	bmi.n	800427c <__smakebuf_r+0x18>
 800429c:	f023 0303 	bic.w	r3, r3, #3
 80042a0:	f043 0302 	orr.w	r3, r3, #2
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	e7e3      	b.n	8004270 <__smakebuf_r+0xc>
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <__smakebuf_r+0x7c>)
 80042aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	6020      	str	r0, [r4, #0]
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	9b00      	ldr	r3, [sp, #0]
 80042b8:	6163      	str	r3, [r4, #20]
 80042ba:	9b01      	ldr	r3, [sp, #4]
 80042bc:	6120      	str	r0, [r4, #16]
 80042be:	b15b      	cbz	r3, 80042d8 <__smakebuf_r+0x74>
 80042c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c4:	4630      	mov	r0, r6
 80042c6:	f000 fc0d 	bl	8004ae4 <_isatty_r>
 80042ca:	b128      	cbz	r0, 80042d8 <__smakebuf_r+0x74>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	89a3      	ldrh	r3, [r4, #12]
 80042da:	431d      	orrs	r5, r3
 80042dc:	81a5      	strh	r5, [r4, #12]
 80042de:	e7cd      	b.n	800427c <__smakebuf_r+0x18>
 80042e0:	080040d1 	.word	0x080040d1

080042e4 <malloc>:
 80042e4:	4b02      	ldr	r3, [pc, #8]	; (80042f0 <malloc+0xc>)
 80042e6:	4601      	mov	r1, r0
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	f000 b851 	b.w	8004390 <_malloc_r>
 80042ee:	bf00      	nop
 80042f0:	20000010 	.word	0x20000010

080042f4 <_free_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4605      	mov	r5, r0
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d045      	beq.n	8004388 <_free_r+0x94>
 80042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004300:	1f0c      	subs	r4, r1, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfb8      	it	lt
 8004306:	18e4      	addlt	r4, r4, r3
 8004308:	f000 fc0e 	bl	8004b28 <__malloc_lock>
 800430c:	4a1f      	ldr	r2, [pc, #124]	; (800438c <_free_r+0x98>)
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	4610      	mov	r0, r2
 8004312:	b933      	cbnz	r3, 8004322 <_free_r+0x2e>
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	6014      	str	r4, [r2, #0]
 8004318:	4628      	mov	r0, r5
 800431a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800431e:	f000 bc04 	b.w	8004b2a <__malloc_unlock>
 8004322:	42a3      	cmp	r3, r4
 8004324:	d90c      	bls.n	8004340 <_free_r+0x4c>
 8004326:	6821      	ldr	r1, [r4, #0]
 8004328:	1862      	adds	r2, r4, r1
 800432a:	4293      	cmp	r3, r2
 800432c:	bf04      	itt	eq
 800432e:	681a      	ldreq	r2, [r3, #0]
 8004330:	685b      	ldreq	r3, [r3, #4]
 8004332:	6063      	str	r3, [r4, #4]
 8004334:	bf04      	itt	eq
 8004336:	1852      	addeq	r2, r2, r1
 8004338:	6022      	streq	r2, [r4, #0]
 800433a:	6004      	str	r4, [r0, #0]
 800433c:	e7ec      	b.n	8004318 <_free_r+0x24>
 800433e:	4613      	mov	r3, r2
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	b10a      	cbz	r2, 8004348 <_free_r+0x54>
 8004344:	42a2      	cmp	r2, r4
 8004346:	d9fa      	bls.n	800433e <_free_r+0x4a>
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	1858      	adds	r0, r3, r1
 800434c:	42a0      	cmp	r0, r4
 800434e:	d10b      	bne.n	8004368 <_free_r+0x74>
 8004350:	6820      	ldr	r0, [r4, #0]
 8004352:	4401      	add	r1, r0
 8004354:	1858      	adds	r0, r3, r1
 8004356:	4282      	cmp	r2, r0
 8004358:	6019      	str	r1, [r3, #0]
 800435a:	d1dd      	bne.n	8004318 <_free_r+0x24>
 800435c:	6810      	ldr	r0, [r2, #0]
 800435e:	6852      	ldr	r2, [r2, #4]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	4401      	add	r1, r0
 8004364:	6019      	str	r1, [r3, #0]
 8004366:	e7d7      	b.n	8004318 <_free_r+0x24>
 8004368:	d902      	bls.n	8004370 <_free_r+0x7c>
 800436a:	230c      	movs	r3, #12
 800436c:	602b      	str	r3, [r5, #0]
 800436e:	e7d3      	b.n	8004318 <_free_r+0x24>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	1821      	adds	r1, r4, r0
 8004374:	428a      	cmp	r2, r1
 8004376:	bf04      	itt	eq
 8004378:	6811      	ldreq	r1, [r2, #0]
 800437a:	6852      	ldreq	r2, [r2, #4]
 800437c:	6062      	str	r2, [r4, #4]
 800437e:	bf04      	itt	eq
 8004380:	1809      	addeq	r1, r1, r0
 8004382:	6021      	streq	r1, [r4, #0]
 8004384:	605c      	str	r4, [r3, #4]
 8004386:	e7c7      	b.n	8004318 <_free_r+0x24>
 8004388:	bd38      	pop	{r3, r4, r5, pc}
 800438a:	bf00      	nop
 800438c:	2000009c 	.word	0x2000009c

08004390 <_malloc_r>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	1ccd      	adds	r5, r1, #3
 8004394:	f025 0503 	bic.w	r5, r5, #3
 8004398:	3508      	adds	r5, #8
 800439a:	2d0c      	cmp	r5, #12
 800439c:	bf38      	it	cc
 800439e:	250c      	movcc	r5, #12
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	4606      	mov	r6, r0
 80043a4:	db01      	blt.n	80043aa <_malloc_r+0x1a>
 80043a6:	42a9      	cmp	r1, r5
 80043a8:	d903      	bls.n	80043b2 <_malloc_r+0x22>
 80043aa:	230c      	movs	r3, #12
 80043ac:	6033      	str	r3, [r6, #0]
 80043ae:	2000      	movs	r0, #0
 80043b0:	bd70      	pop	{r4, r5, r6, pc}
 80043b2:	f000 fbb9 	bl	8004b28 <__malloc_lock>
 80043b6:	4a21      	ldr	r2, [pc, #132]	; (800443c <_malloc_r+0xac>)
 80043b8:	6814      	ldr	r4, [r2, #0]
 80043ba:	4621      	mov	r1, r4
 80043bc:	b991      	cbnz	r1, 80043e4 <_malloc_r+0x54>
 80043be:	4c20      	ldr	r4, [pc, #128]	; (8004440 <_malloc_r+0xb0>)
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	b91b      	cbnz	r3, 80043cc <_malloc_r+0x3c>
 80043c4:	4630      	mov	r0, r6
 80043c6:	f000 fb05 	bl	80049d4 <_sbrk_r>
 80043ca:	6020      	str	r0, [r4, #0]
 80043cc:	4629      	mov	r1, r5
 80043ce:	4630      	mov	r0, r6
 80043d0:	f000 fb00 	bl	80049d4 <_sbrk_r>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d124      	bne.n	8004422 <_malloc_r+0x92>
 80043d8:	230c      	movs	r3, #12
 80043da:	6033      	str	r3, [r6, #0]
 80043dc:	4630      	mov	r0, r6
 80043de:	f000 fba4 	bl	8004b2a <__malloc_unlock>
 80043e2:	e7e4      	b.n	80043ae <_malloc_r+0x1e>
 80043e4:	680b      	ldr	r3, [r1, #0]
 80043e6:	1b5b      	subs	r3, r3, r5
 80043e8:	d418      	bmi.n	800441c <_malloc_r+0x8c>
 80043ea:	2b0b      	cmp	r3, #11
 80043ec:	d90f      	bls.n	800440e <_malloc_r+0x7e>
 80043ee:	600b      	str	r3, [r1, #0]
 80043f0:	50cd      	str	r5, [r1, r3]
 80043f2:	18cc      	adds	r4, r1, r3
 80043f4:	4630      	mov	r0, r6
 80043f6:	f000 fb98 	bl	8004b2a <__malloc_unlock>
 80043fa:	f104 000b 	add.w	r0, r4, #11
 80043fe:	1d23      	adds	r3, r4, #4
 8004400:	f020 0007 	bic.w	r0, r0, #7
 8004404:	1ac3      	subs	r3, r0, r3
 8004406:	d0d3      	beq.n	80043b0 <_malloc_r+0x20>
 8004408:	425a      	negs	r2, r3
 800440a:	50e2      	str	r2, [r4, r3]
 800440c:	e7d0      	b.n	80043b0 <_malloc_r+0x20>
 800440e:	428c      	cmp	r4, r1
 8004410:	684b      	ldr	r3, [r1, #4]
 8004412:	bf16      	itet	ne
 8004414:	6063      	strne	r3, [r4, #4]
 8004416:	6013      	streq	r3, [r2, #0]
 8004418:	460c      	movne	r4, r1
 800441a:	e7eb      	b.n	80043f4 <_malloc_r+0x64>
 800441c:	460c      	mov	r4, r1
 800441e:	6849      	ldr	r1, [r1, #4]
 8004420:	e7cc      	b.n	80043bc <_malloc_r+0x2c>
 8004422:	1cc4      	adds	r4, r0, #3
 8004424:	f024 0403 	bic.w	r4, r4, #3
 8004428:	42a0      	cmp	r0, r4
 800442a:	d005      	beq.n	8004438 <_malloc_r+0xa8>
 800442c:	1a21      	subs	r1, r4, r0
 800442e:	4630      	mov	r0, r6
 8004430:	f000 fad0 	bl	80049d4 <_sbrk_r>
 8004434:	3001      	adds	r0, #1
 8004436:	d0cf      	beq.n	80043d8 <_malloc_r+0x48>
 8004438:	6025      	str	r5, [r4, #0]
 800443a:	e7db      	b.n	80043f4 <_malloc_r+0x64>
 800443c:	2000009c 	.word	0x2000009c
 8004440:	200000a0 	.word	0x200000a0

08004444 <__sfputc_r>:
 8004444:	6893      	ldr	r3, [r2, #8]
 8004446:	3b01      	subs	r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	b410      	push	{r4}
 800444c:	6093      	str	r3, [r2, #8]
 800444e:	da08      	bge.n	8004462 <__sfputc_r+0x1e>
 8004450:	6994      	ldr	r4, [r2, #24]
 8004452:	42a3      	cmp	r3, r4
 8004454:	db01      	blt.n	800445a <__sfputc_r+0x16>
 8004456:	290a      	cmp	r1, #10
 8004458:	d103      	bne.n	8004462 <__sfputc_r+0x1e>
 800445a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800445e:	f7ff bca3 	b.w	8003da8 <__swbuf_r>
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	1c58      	adds	r0, r3, #1
 8004466:	6010      	str	r0, [r2, #0]
 8004468:	7019      	strb	r1, [r3, #0]
 800446a:	4608      	mov	r0, r1
 800446c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004470:	4770      	bx	lr

08004472 <__sfputs_r>:
 8004472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004474:	4606      	mov	r6, r0
 8004476:	460f      	mov	r7, r1
 8004478:	4614      	mov	r4, r2
 800447a:	18d5      	adds	r5, r2, r3
 800447c:	42ac      	cmp	r4, r5
 800447e:	d101      	bne.n	8004484 <__sfputs_r+0x12>
 8004480:	2000      	movs	r0, #0
 8004482:	e007      	b.n	8004494 <__sfputs_r+0x22>
 8004484:	463a      	mov	r2, r7
 8004486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800448a:	4630      	mov	r0, r6
 800448c:	f7ff ffda 	bl	8004444 <__sfputc_r>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d1f3      	bne.n	800447c <__sfputs_r+0xa>
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004498 <_vfiprintf_r>:
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	460c      	mov	r4, r1
 800449e:	b09d      	sub	sp, #116	; 0x74
 80044a0:	4617      	mov	r7, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	4606      	mov	r6, r0
 80044a6:	b118      	cbz	r0, 80044b0 <_vfiprintf_r+0x18>
 80044a8:	6983      	ldr	r3, [r0, #24]
 80044aa:	b90b      	cbnz	r3, 80044b0 <_vfiprintf_r+0x18>
 80044ac:	f7ff fe2c 	bl	8004108 <__sinit>
 80044b0:	4b7c      	ldr	r3, [pc, #496]	; (80046a4 <_vfiprintf_r+0x20c>)
 80044b2:	429c      	cmp	r4, r3
 80044b4:	d158      	bne.n	8004568 <_vfiprintf_r+0xd0>
 80044b6:	6874      	ldr	r4, [r6, #4]
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	0718      	lsls	r0, r3, #28
 80044bc:	d55e      	bpl.n	800457c <_vfiprintf_r+0xe4>
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <_vfiprintf_r+0xe4>
 80044c4:	2300      	movs	r3, #0
 80044c6:	9309      	str	r3, [sp, #36]	; 0x24
 80044c8:	2320      	movs	r3, #32
 80044ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044ce:	2330      	movs	r3, #48	; 0x30
 80044d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044d4:	9503      	str	r5, [sp, #12]
 80044d6:	f04f 0b01 	mov.w	fp, #1
 80044da:	46b8      	mov	r8, r7
 80044dc:	4645      	mov	r5, r8
 80044de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80044e2:	b10b      	cbz	r3, 80044e8 <_vfiprintf_r+0x50>
 80044e4:	2b25      	cmp	r3, #37	; 0x25
 80044e6:	d154      	bne.n	8004592 <_vfiprintf_r+0xfa>
 80044e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80044ec:	d00b      	beq.n	8004506 <_vfiprintf_r+0x6e>
 80044ee:	4653      	mov	r3, sl
 80044f0:	463a      	mov	r2, r7
 80044f2:	4621      	mov	r1, r4
 80044f4:	4630      	mov	r0, r6
 80044f6:	f7ff ffbc 	bl	8004472 <__sfputs_r>
 80044fa:	3001      	adds	r0, #1
 80044fc:	f000 80c2 	beq.w	8004684 <_vfiprintf_r+0x1ec>
 8004500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004502:	4453      	add	r3, sl
 8004504:	9309      	str	r3, [sp, #36]	; 0x24
 8004506:	f898 3000 	ldrb.w	r3, [r8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80ba 	beq.w	8004684 <_vfiprintf_r+0x1ec>
 8004510:	2300      	movs	r3, #0
 8004512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800451a:	9304      	str	r3, [sp, #16]
 800451c:	9307      	str	r3, [sp, #28]
 800451e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004522:	931a      	str	r3, [sp, #104]	; 0x68
 8004524:	46a8      	mov	r8, r5
 8004526:	2205      	movs	r2, #5
 8004528:	f818 1b01 	ldrb.w	r1, [r8], #1
 800452c:	485e      	ldr	r0, [pc, #376]	; (80046a8 <_vfiprintf_r+0x210>)
 800452e:	f7fb fe5f 	bl	80001f0 <memchr>
 8004532:	9b04      	ldr	r3, [sp, #16]
 8004534:	bb78      	cbnz	r0, 8004596 <_vfiprintf_r+0xfe>
 8004536:	06d9      	lsls	r1, r3, #27
 8004538:	bf44      	itt	mi
 800453a:	2220      	movmi	r2, #32
 800453c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004540:	071a      	lsls	r2, r3, #28
 8004542:	bf44      	itt	mi
 8004544:	222b      	movmi	r2, #43	; 0x2b
 8004546:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800454a:	782a      	ldrb	r2, [r5, #0]
 800454c:	2a2a      	cmp	r2, #42	; 0x2a
 800454e:	d02a      	beq.n	80045a6 <_vfiprintf_r+0x10e>
 8004550:	9a07      	ldr	r2, [sp, #28]
 8004552:	46a8      	mov	r8, r5
 8004554:	2000      	movs	r0, #0
 8004556:	250a      	movs	r5, #10
 8004558:	4641      	mov	r1, r8
 800455a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800455e:	3b30      	subs	r3, #48	; 0x30
 8004560:	2b09      	cmp	r3, #9
 8004562:	d969      	bls.n	8004638 <_vfiprintf_r+0x1a0>
 8004564:	b360      	cbz	r0, 80045c0 <_vfiprintf_r+0x128>
 8004566:	e024      	b.n	80045b2 <_vfiprintf_r+0x11a>
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <_vfiprintf_r+0x214>)
 800456a:	429c      	cmp	r4, r3
 800456c:	d101      	bne.n	8004572 <_vfiprintf_r+0xda>
 800456e:	68b4      	ldr	r4, [r6, #8]
 8004570:	e7a2      	b.n	80044b8 <_vfiprintf_r+0x20>
 8004572:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <_vfiprintf_r+0x218>)
 8004574:	429c      	cmp	r4, r3
 8004576:	bf08      	it	eq
 8004578:	68f4      	ldreq	r4, [r6, #12]
 800457a:	e79d      	b.n	80044b8 <_vfiprintf_r+0x20>
 800457c:	4621      	mov	r1, r4
 800457e:	4630      	mov	r0, r6
 8004580:	f7ff fc64 	bl	8003e4c <__swsetup_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	d09d      	beq.n	80044c4 <_vfiprintf_r+0x2c>
 8004588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800458c:	b01d      	add	sp, #116	; 0x74
 800458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004592:	46a8      	mov	r8, r5
 8004594:	e7a2      	b.n	80044dc <_vfiprintf_r+0x44>
 8004596:	4a44      	ldr	r2, [pc, #272]	; (80046a8 <_vfiprintf_r+0x210>)
 8004598:	1a80      	subs	r0, r0, r2
 800459a:	fa0b f000 	lsl.w	r0, fp, r0
 800459e:	4318      	orrs	r0, r3
 80045a0:	9004      	str	r0, [sp, #16]
 80045a2:	4645      	mov	r5, r8
 80045a4:	e7be      	b.n	8004524 <_vfiprintf_r+0x8c>
 80045a6:	9a03      	ldr	r2, [sp, #12]
 80045a8:	1d11      	adds	r1, r2, #4
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	9103      	str	r1, [sp, #12]
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	db01      	blt.n	80045b6 <_vfiprintf_r+0x11e>
 80045b2:	9207      	str	r2, [sp, #28]
 80045b4:	e004      	b.n	80045c0 <_vfiprintf_r+0x128>
 80045b6:	4252      	negs	r2, r2
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	9207      	str	r2, [sp, #28]
 80045be:	9304      	str	r3, [sp, #16]
 80045c0:	f898 3000 	ldrb.w	r3, [r8]
 80045c4:	2b2e      	cmp	r3, #46	; 0x2e
 80045c6:	d10e      	bne.n	80045e6 <_vfiprintf_r+0x14e>
 80045c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80045cc:	2b2a      	cmp	r3, #42	; 0x2a
 80045ce:	d138      	bne.n	8004642 <_vfiprintf_r+0x1aa>
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	1d1a      	adds	r2, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	9203      	str	r2, [sp, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bfb8      	it	lt
 80045dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80045e0:	f108 0802 	add.w	r8, r8, #2
 80045e4:	9305      	str	r3, [sp, #20]
 80045e6:	4d33      	ldr	r5, [pc, #204]	; (80046b4 <_vfiprintf_r+0x21c>)
 80045e8:	f898 1000 	ldrb.w	r1, [r8]
 80045ec:	2203      	movs	r2, #3
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7fb fdfe 	bl	80001f0 <memchr>
 80045f4:	b140      	cbz	r0, 8004608 <_vfiprintf_r+0x170>
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	1b40      	subs	r0, r0, r5
 80045fa:	fa03 f000 	lsl.w	r0, r3, r0
 80045fe:	9b04      	ldr	r3, [sp, #16]
 8004600:	4303      	orrs	r3, r0
 8004602:	f108 0801 	add.w	r8, r8, #1
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	f898 1000 	ldrb.w	r1, [r8]
 800460c:	482a      	ldr	r0, [pc, #168]	; (80046b8 <_vfiprintf_r+0x220>)
 800460e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004612:	2206      	movs	r2, #6
 8004614:	f108 0701 	add.w	r7, r8, #1
 8004618:	f7fb fdea 	bl	80001f0 <memchr>
 800461c:	2800      	cmp	r0, #0
 800461e:	d037      	beq.n	8004690 <_vfiprintf_r+0x1f8>
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <_vfiprintf_r+0x224>)
 8004622:	bb1b      	cbnz	r3, 800466c <_vfiprintf_r+0x1d4>
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	3307      	adds	r3, #7
 8004628:	f023 0307 	bic.w	r3, r3, #7
 800462c:	3308      	adds	r3, #8
 800462e:	9303      	str	r3, [sp, #12]
 8004630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004632:	444b      	add	r3, r9
 8004634:	9309      	str	r3, [sp, #36]	; 0x24
 8004636:	e750      	b.n	80044da <_vfiprintf_r+0x42>
 8004638:	fb05 3202 	mla	r2, r5, r2, r3
 800463c:	2001      	movs	r0, #1
 800463e:	4688      	mov	r8, r1
 8004640:	e78a      	b.n	8004558 <_vfiprintf_r+0xc0>
 8004642:	2300      	movs	r3, #0
 8004644:	f108 0801 	add.w	r8, r8, #1
 8004648:	9305      	str	r3, [sp, #20]
 800464a:	4619      	mov	r1, r3
 800464c:	250a      	movs	r5, #10
 800464e:	4640      	mov	r0, r8
 8004650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004654:	3a30      	subs	r2, #48	; 0x30
 8004656:	2a09      	cmp	r2, #9
 8004658:	d903      	bls.n	8004662 <_vfiprintf_r+0x1ca>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0c3      	beq.n	80045e6 <_vfiprintf_r+0x14e>
 800465e:	9105      	str	r1, [sp, #20]
 8004660:	e7c1      	b.n	80045e6 <_vfiprintf_r+0x14e>
 8004662:	fb05 2101 	mla	r1, r5, r1, r2
 8004666:	2301      	movs	r3, #1
 8004668:	4680      	mov	r8, r0
 800466a:	e7f0      	b.n	800464e <_vfiprintf_r+0x1b6>
 800466c:	ab03      	add	r3, sp, #12
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	4622      	mov	r2, r4
 8004672:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <_vfiprintf_r+0x228>)
 8004674:	a904      	add	r1, sp, #16
 8004676:	4630      	mov	r0, r6
 8004678:	f3af 8000 	nop.w
 800467c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004680:	4681      	mov	r9, r0
 8004682:	d1d5      	bne.n	8004630 <_vfiprintf_r+0x198>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	065b      	lsls	r3, r3, #25
 8004688:	f53f af7e 	bmi.w	8004588 <_vfiprintf_r+0xf0>
 800468c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800468e:	e77d      	b.n	800458c <_vfiprintf_r+0xf4>
 8004690:	ab03      	add	r3, sp, #12
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	4622      	mov	r2, r4
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <_vfiprintf_r+0x228>)
 8004698:	a904      	add	r1, sp, #16
 800469a:	4630      	mov	r0, r6
 800469c:	f000 f888 	bl	80047b0 <_printf_i>
 80046a0:	e7ec      	b.n	800467c <_vfiprintf_r+0x1e4>
 80046a2:	bf00      	nop
 80046a4:	08006c78 	.word	0x08006c78
 80046a8:	08006cb8 	.word	0x08006cb8
 80046ac:	08006c98 	.word	0x08006c98
 80046b0:	08006c58 	.word	0x08006c58
 80046b4:	08006cbe 	.word	0x08006cbe
 80046b8:	08006cc2 	.word	0x08006cc2
 80046bc:	00000000 	.word	0x00000000
 80046c0:	08004473 	.word	0x08004473

080046c4 <_printf_common>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	4691      	mov	r9, r2
 80046ca:	461f      	mov	r7, r3
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bfb8      	it	lt
 80046d8:	4613      	movlt	r3, r2
 80046da:	f8c9 3000 	str.w	r3, [r9]
 80046de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046e2:	4606      	mov	r6, r0
 80046e4:	460c      	mov	r4, r1
 80046e6:	b112      	cbz	r2, 80046ee <_printf_common+0x2a>
 80046e8:	3301      	adds	r3, #1
 80046ea:	f8c9 3000 	str.w	r3, [r9]
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	0699      	lsls	r1, r3, #26
 80046f2:	bf42      	ittt	mi
 80046f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80046f8:	3302      	addmi	r3, #2
 80046fa:	f8c9 3000 	strmi.w	r3, [r9]
 80046fe:	6825      	ldr	r5, [r4, #0]
 8004700:	f015 0506 	ands.w	r5, r5, #6
 8004704:	d107      	bne.n	8004716 <_printf_common+0x52>
 8004706:	f104 0a19 	add.w	sl, r4, #25
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	f8d9 2000 	ldr.w	r2, [r9]
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	42ab      	cmp	r3, r5
 8004714:	dc28      	bgt.n	8004768 <_printf_common+0xa4>
 8004716:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	3300      	adds	r3, #0
 800471e:	bf18      	it	ne
 8004720:	2301      	movne	r3, #1
 8004722:	0692      	lsls	r2, r2, #26
 8004724:	d42d      	bmi.n	8004782 <_printf_common+0xbe>
 8004726:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800472a:	4639      	mov	r1, r7
 800472c:	4630      	mov	r0, r6
 800472e:	47c0      	blx	r8
 8004730:	3001      	adds	r0, #1
 8004732:	d020      	beq.n	8004776 <_printf_common+0xb2>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	68e5      	ldr	r5, [r4, #12]
 8004738:	f8d9 2000 	ldr.w	r2, [r9]
 800473c:	f003 0306 	and.w	r3, r3, #6
 8004740:	2b04      	cmp	r3, #4
 8004742:	bf08      	it	eq
 8004744:	1aad      	subeq	r5, r5, r2
 8004746:	68a3      	ldr	r3, [r4, #8]
 8004748:	6922      	ldr	r2, [r4, #16]
 800474a:	bf0c      	ite	eq
 800474c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004750:	2500      	movne	r5, #0
 8004752:	4293      	cmp	r3, r2
 8004754:	bfc4      	itt	gt
 8004756:	1a9b      	subgt	r3, r3, r2
 8004758:	18ed      	addgt	r5, r5, r3
 800475a:	f04f 0900 	mov.w	r9, #0
 800475e:	341a      	adds	r4, #26
 8004760:	454d      	cmp	r5, r9
 8004762:	d11a      	bne.n	800479a <_printf_common+0xd6>
 8004764:	2000      	movs	r0, #0
 8004766:	e008      	b.n	800477a <_printf_common+0xb6>
 8004768:	2301      	movs	r3, #1
 800476a:	4652      	mov	r2, sl
 800476c:	4639      	mov	r1, r7
 800476e:	4630      	mov	r0, r6
 8004770:	47c0      	blx	r8
 8004772:	3001      	adds	r0, #1
 8004774:	d103      	bne.n	800477e <_printf_common+0xba>
 8004776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477e:	3501      	adds	r5, #1
 8004780:	e7c3      	b.n	800470a <_printf_common+0x46>
 8004782:	18e1      	adds	r1, r4, r3
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	2030      	movs	r0, #48	; 0x30
 8004788:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800478c:	4422      	add	r2, r4
 800478e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004792:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004796:	3302      	adds	r3, #2
 8004798:	e7c5      	b.n	8004726 <_printf_common+0x62>
 800479a:	2301      	movs	r3, #1
 800479c:	4622      	mov	r2, r4
 800479e:	4639      	mov	r1, r7
 80047a0:	4630      	mov	r0, r6
 80047a2:	47c0      	blx	r8
 80047a4:	3001      	adds	r0, #1
 80047a6:	d0e6      	beq.n	8004776 <_printf_common+0xb2>
 80047a8:	f109 0901 	add.w	r9, r9, #1
 80047ac:	e7d8      	b.n	8004760 <_printf_common+0x9c>
	...

080047b0 <_printf_i>:
 80047b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80047b8:	460c      	mov	r4, r1
 80047ba:	7e09      	ldrb	r1, [r1, #24]
 80047bc:	b085      	sub	sp, #20
 80047be:	296e      	cmp	r1, #110	; 0x6e
 80047c0:	4617      	mov	r7, r2
 80047c2:	4606      	mov	r6, r0
 80047c4:	4698      	mov	r8, r3
 80047c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047c8:	f000 80b3 	beq.w	8004932 <_printf_i+0x182>
 80047cc:	d822      	bhi.n	8004814 <_printf_i+0x64>
 80047ce:	2963      	cmp	r1, #99	; 0x63
 80047d0:	d036      	beq.n	8004840 <_printf_i+0x90>
 80047d2:	d80a      	bhi.n	80047ea <_printf_i+0x3a>
 80047d4:	2900      	cmp	r1, #0
 80047d6:	f000 80b9 	beq.w	800494c <_printf_i+0x19c>
 80047da:	2958      	cmp	r1, #88	; 0x58
 80047dc:	f000 8083 	beq.w	80048e6 <_printf_i+0x136>
 80047e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80047e8:	e032      	b.n	8004850 <_printf_i+0xa0>
 80047ea:	2964      	cmp	r1, #100	; 0x64
 80047ec:	d001      	beq.n	80047f2 <_printf_i+0x42>
 80047ee:	2969      	cmp	r1, #105	; 0x69
 80047f0:	d1f6      	bne.n	80047e0 <_printf_i+0x30>
 80047f2:	6820      	ldr	r0, [r4, #0]
 80047f4:	6813      	ldr	r3, [r2, #0]
 80047f6:	0605      	lsls	r5, r0, #24
 80047f8:	f103 0104 	add.w	r1, r3, #4
 80047fc:	d52a      	bpl.n	8004854 <_printf_i+0xa4>
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6011      	str	r1, [r2, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	da03      	bge.n	800480e <_printf_i+0x5e>
 8004806:	222d      	movs	r2, #45	; 0x2d
 8004808:	425b      	negs	r3, r3
 800480a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800480e:	486f      	ldr	r0, [pc, #444]	; (80049cc <_printf_i+0x21c>)
 8004810:	220a      	movs	r2, #10
 8004812:	e039      	b.n	8004888 <_printf_i+0xd8>
 8004814:	2973      	cmp	r1, #115	; 0x73
 8004816:	f000 809d 	beq.w	8004954 <_printf_i+0x1a4>
 800481a:	d808      	bhi.n	800482e <_printf_i+0x7e>
 800481c:	296f      	cmp	r1, #111	; 0x6f
 800481e:	d020      	beq.n	8004862 <_printf_i+0xb2>
 8004820:	2970      	cmp	r1, #112	; 0x70
 8004822:	d1dd      	bne.n	80047e0 <_printf_i+0x30>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	f043 0320 	orr.w	r3, r3, #32
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	e003      	b.n	8004836 <_printf_i+0x86>
 800482e:	2975      	cmp	r1, #117	; 0x75
 8004830:	d017      	beq.n	8004862 <_printf_i+0xb2>
 8004832:	2978      	cmp	r1, #120	; 0x78
 8004834:	d1d4      	bne.n	80047e0 <_printf_i+0x30>
 8004836:	2378      	movs	r3, #120	; 0x78
 8004838:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800483c:	4864      	ldr	r0, [pc, #400]	; (80049d0 <_printf_i+0x220>)
 800483e:	e055      	b.n	80048ec <_printf_i+0x13c>
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	1d19      	adds	r1, r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6011      	str	r1, [r2, #0]
 8004848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800484c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004850:	2301      	movs	r3, #1
 8004852:	e08c      	b.n	800496e <_printf_i+0x1be>
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6011      	str	r1, [r2, #0]
 8004858:	f010 0f40 	tst.w	r0, #64	; 0x40
 800485c:	bf18      	it	ne
 800485e:	b21b      	sxthne	r3, r3
 8004860:	e7cf      	b.n	8004802 <_printf_i+0x52>
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	6825      	ldr	r5, [r4, #0]
 8004866:	1d18      	adds	r0, r3, #4
 8004868:	6010      	str	r0, [r2, #0]
 800486a:	0628      	lsls	r0, r5, #24
 800486c:	d501      	bpl.n	8004872 <_printf_i+0xc2>
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	e002      	b.n	8004878 <_printf_i+0xc8>
 8004872:	0668      	lsls	r0, r5, #25
 8004874:	d5fb      	bpl.n	800486e <_printf_i+0xbe>
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	4854      	ldr	r0, [pc, #336]	; (80049cc <_printf_i+0x21c>)
 800487a:	296f      	cmp	r1, #111	; 0x6f
 800487c:	bf14      	ite	ne
 800487e:	220a      	movne	r2, #10
 8004880:	2208      	moveq	r2, #8
 8004882:	2100      	movs	r1, #0
 8004884:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004888:	6865      	ldr	r5, [r4, #4]
 800488a:	60a5      	str	r5, [r4, #8]
 800488c:	2d00      	cmp	r5, #0
 800488e:	f2c0 8095 	blt.w	80049bc <_printf_i+0x20c>
 8004892:	6821      	ldr	r1, [r4, #0]
 8004894:	f021 0104 	bic.w	r1, r1, #4
 8004898:	6021      	str	r1, [r4, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d13d      	bne.n	800491a <_printf_i+0x16a>
 800489e:	2d00      	cmp	r5, #0
 80048a0:	f040 808e 	bne.w	80049c0 <_printf_i+0x210>
 80048a4:	4665      	mov	r5, ip
 80048a6:	2a08      	cmp	r2, #8
 80048a8:	d10b      	bne.n	80048c2 <_printf_i+0x112>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	07db      	lsls	r3, r3, #31
 80048ae:	d508      	bpl.n	80048c2 <_printf_i+0x112>
 80048b0:	6923      	ldr	r3, [r4, #16]
 80048b2:	6862      	ldr	r2, [r4, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	bfde      	ittt	le
 80048b8:	2330      	movle	r3, #48	; 0x30
 80048ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80048c2:	ebac 0305 	sub.w	r3, ip, r5
 80048c6:	6123      	str	r3, [r4, #16]
 80048c8:	f8cd 8000 	str.w	r8, [sp]
 80048cc:	463b      	mov	r3, r7
 80048ce:	aa03      	add	r2, sp, #12
 80048d0:	4621      	mov	r1, r4
 80048d2:	4630      	mov	r0, r6
 80048d4:	f7ff fef6 	bl	80046c4 <_printf_common>
 80048d8:	3001      	adds	r0, #1
 80048da:	d14d      	bne.n	8004978 <_printf_i+0x1c8>
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048e0:	b005      	add	sp, #20
 80048e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048e6:	4839      	ldr	r0, [pc, #228]	; (80049cc <_printf_i+0x21c>)
 80048e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	6821      	ldr	r1, [r4, #0]
 80048f0:	1d1d      	adds	r5, r3, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6015      	str	r5, [r2, #0]
 80048f6:	060a      	lsls	r2, r1, #24
 80048f8:	d50b      	bpl.n	8004912 <_printf_i+0x162>
 80048fa:	07ca      	lsls	r2, r1, #31
 80048fc:	bf44      	itt	mi
 80048fe:	f041 0120 	orrmi.w	r1, r1, #32
 8004902:	6021      	strmi	r1, [r4, #0]
 8004904:	b91b      	cbnz	r3, 800490e <_printf_i+0x15e>
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	f022 0220 	bic.w	r2, r2, #32
 800490c:	6022      	str	r2, [r4, #0]
 800490e:	2210      	movs	r2, #16
 8004910:	e7b7      	b.n	8004882 <_printf_i+0xd2>
 8004912:	064d      	lsls	r5, r1, #25
 8004914:	bf48      	it	mi
 8004916:	b29b      	uxthmi	r3, r3
 8004918:	e7ef      	b.n	80048fa <_printf_i+0x14a>
 800491a:	4665      	mov	r5, ip
 800491c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004920:	fb02 3311 	mls	r3, r2, r1, r3
 8004924:	5cc3      	ldrb	r3, [r0, r3]
 8004926:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800492a:	460b      	mov	r3, r1
 800492c:	2900      	cmp	r1, #0
 800492e:	d1f5      	bne.n	800491c <_printf_i+0x16c>
 8004930:	e7b9      	b.n	80048a6 <_printf_i+0xf6>
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	6825      	ldr	r5, [r4, #0]
 8004936:	6961      	ldr	r1, [r4, #20]
 8004938:	1d18      	adds	r0, r3, #4
 800493a:	6010      	str	r0, [r2, #0]
 800493c:	0628      	lsls	r0, r5, #24
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	d501      	bpl.n	8004946 <_printf_i+0x196>
 8004942:	6019      	str	r1, [r3, #0]
 8004944:	e002      	b.n	800494c <_printf_i+0x19c>
 8004946:	066a      	lsls	r2, r5, #25
 8004948:	d5fb      	bpl.n	8004942 <_printf_i+0x192>
 800494a:	8019      	strh	r1, [r3, #0]
 800494c:	2300      	movs	r3, #0
 800494e:	6123      	str	r3, [r4, #16]
 8004950:	4665      	mov	r5, ip
 8004952:	e7b9      	b.n	80048c8 <_printf_i+0x118>
 8004954:	6813      	ldr	r3, [r2, #0]
 8004956:	1d19      	adds	r1, r3, #4
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	681d      	ldr	r5, [r3, #0]
 800495c:	6862      	ldr	r2, [r4, #4]
 800495e:	2100      	movs	r1, #0
 8004960:	4628      	mov	r0, r5
 8004962:	f7fb fc45 	bl	80001f0 <memchr>
 8004966:	b108      	cbz	r0, 800496c <_printf_i+0x1bc>
 8004968:	1b40      	subs	r0, r0, r5
 800496a:	6060      	str	r0, [r4, #4]
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	6123      	str	r3, [r4, #16]
 8004970:	2300      	movs	r3, #0
 8004972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004976:	e7a7      	b.n	80048c8 <_printf_i+0x118>
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	462a      	mov	r2, r5
 800497c:	4639      	mov	r1, r7
 800497e:	4630      	mov	r0, r6
 8004980:	47c0      	blx	r8
 8004982:	3001      	adds	r0, #1
 8004984:	d0aa      	beq.n	80048dc <_printf_i+0x12c>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	079b      	lsls	r3, r3, #30
 800498a:	d413      	bmi.n	80049b4 <_printf_i+0x204>
 800498c:	68e0      	ldr	r0, [r4, #12]
 800498e:	9b03      	ldr	r3, [sp, #12]
 8004990:	4298      	cmp	r0, r3
 8004992:	bfb8      	it	lt
 8004994:	4618      	movlt	r0, r3
 8004996:	e7a3      	b.n	80048e0 <_printf_i+0x130>
 8004998:	2301      	movs	r3, #1
 800499a:	464a      	mov	r2, r9
 800499c:	4639      	mov	r1, r7
 800499e:	4630      	mov	r0, r6
 80049a0:	47c0      	blx	r8
 80049a2:	3001      	adds	r0, #1
 80049a4:	d09a      	beq.n	80048dc <_printf_i+0x12c>
 80049a6:	3501      	adds	r5, #1
 80049a8:	68e3      	ldr	r3, [r4, #12]
 80049aa:	9a03      	ldr	r2, [sp, #12]
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	42ab      	cmp	r3, r5
 80049b0:	dcf2      	bgt.n	8004998 <_printf_i+0x1e8>
 80049b2:	e7eb      	b.n	800498c <_printf_i+0x1dc>
 80049b4:	2500      	movs	r5, #0
 80049b6:	f104 0919 	add.w	r9, r4, #25
 80049ba:	e7f5      	b.n	80049a8 <_printf_i+0x1f8>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1ac      	bne.n	800491a <_printf_i+0x16a>
 80049c0:	7803      	ldrb	r3, [r0, #0]
 80049c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ca:	e76c      	b.n	80048a6 <_printf_i+0xf6>
 80049cc:	08006cc9 	.word	0x08006cc9
 80049d0:	08006cda 	.word	0x08006cda

080049d4 <_sbrk_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4c06      	ldr	r4, [pc, #24]	; (80049f0 <_sbrk_r+0x1c>)
 80049d8:	2300      	movs	r3, #0
 80049da:	4605      	mov	r5, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	f7fc fbb6 	bl	8001150 <_sbrk>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_sbrk_r+0x1a>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_sbrk_r+0x1a>
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	20000530 	.word	0x20000530

080049f4 <__sread>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	460c      	mov	r4, r1
 80049f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fc:	f000 f896 	bl	8004b2c <_read_r>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	bfab      	itete	ge
 8004a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a06:	89a3      	ldrhlt	r3, [r4, #12]
 8004a08:	181b      	addge	r3, r3, r0
 8004a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a0e:	bfac      	ite	ge
 8004a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a12:	81a3      	strhlt	r3, [r4, #12]
 8004a14:	bd10      	pop	{r4, pc}

08004a16 <__swrite>:
 8004a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1a:	461f      	mov	r7, r3
 8004a1c:	898b      	ldrh	r3, [r1, #12]
 8004a1e:	05db      	lsls	r3, r3, #23
 8004a20:	4605      	mov	r5, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	4616      	mov	r6, r2
 8004a26:	d505      	bpl.n	8004a34 <__swrite+0x1e>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a30:	f000 f868 	bl	8004b04 <_lseek_r>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a3e:	81a3      	strh	r3, [r4, #12]
 8004a40:	4632      	mov	r2, r6
 8004a42:	463b      	mov	r3, r7
 8004a44:	4628      	mov	r0, r5
 8004a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4a:	f000 b817 	b.w	8004a7c <_write_r>

08004a4e <__sseek>:
 8004a4e:	b510      	push	{r4, lr}
 8004a50:	460c      	mov	r4, r1
 8004a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a56:	f000 f855 	bl	8004b04 <_lseek_r>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	bf15      	itete	ne
 8004a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a6a:	81a3      	strheq	r3, [r4, #12]
 8004a6c:	bf18      	it	ne
 8004a6e:	81a3      	strhne	r3, [r4, #12]
 8004a70:	bd10      	pop	{r4, pc}

08004a72 <__sclose>:
 8004a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a76:	f000 b813 	b.w	8004aa0 <_close_r>
	...

08004a7c <_write_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4c07      	ldr	r4, [pc, #28]	; (8004a9c <_write_r+0x20>)
 8004a80:	4605      	mov	r5, r0
 8004a82:	4608      	mov	r0, r1
 8004a84:	4611      	mov	r1, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f7fc fb0f 	bl	80010ae <_write>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_write_r+0x1e>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_write_r+0x1e>
 8004a98:	602b      	str	r3, [r5, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	20000530 	.word	0x20000530

08004aa0 <_close_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4c06      	ldr	r4, [pc, #24]	; (8004abc <_close_r+0x1c>)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	f7fc fb1b 	bl	80010e6 <_close>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_close_r+0x1a>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_close_r+0x1a>
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	20000530 	.word	0x20000530

08004ac0 <_fstat_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4c07      	ldr	r4, [pc, #28]	; (8004ae0 <_fstat_r+0x20>)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	f7fc fb16 	bl	80010fe <_fstat>
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	d102      	bne.n	8004adc <_fstat_r+0x1c>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	b103      	cbz	r3, 8004adc <_fstat_r+0x1c>
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	bd38      	pop	{r3, r4, r5, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000530 	.word	0x20000530

08004ae4 <_isatty_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4c06      	ldr	r4, [pc, #24]	; (8004b00 <_isatty_r+0x1c>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4605      	mov	r5, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	f7fc fb15 	bl	800111e <_isatty>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_isatty_r+0x1a>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_isatty_r+0x1a>
 8004afc:	602b      	str	r3, [r5, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	20000530 	.word	0x20000530

08004b04 <_lseek_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	4c07      	ldr	r4, [pc, #28]	; (8004b24 <_lseek_r+0x20>)
 8004b08:	4605      	mov	r5, r0
 8004b0a:	4608      	mov	r0, r1
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	2200      	movs	r2, #0
 8004b10:	6022      	str	r2, [r4, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f7fc fb0e 	bl	8001134 <_lseek>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_lseek_r+0x1e>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_lseek_r+0x1e>
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	20000530 	.word	0x20000530

08004b28 <__malloc_lock>:
 8004b28:	4770      	bx	lr

08004b2a <__malloc_unlock>:
 8004b2a:	4770      	bx	lr

08004b2c <_read_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4c07      	ldr	r4, [pc, #28]	; (8004b4c <_read_r+0x20>)
 8004b30:	4605      	mov	r5, r0
 8004b32:	4608      	mov	r0, r1
 8004b34:	4611      	mov	r1, r2
 8004b36:	2200      	movs	r2, #0
 8004b38:	6022      	str	r2, [r4, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f7fc fa9a 	bl	8001074 <_read>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_read_r+0x1e>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_read_r+0x1e>
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	20000530 	.word	0x20000530

08004b50 <_init>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

08004b5c <_fini>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr
